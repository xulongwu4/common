//
// File generated by /adaqfs/apps/ROOT/pro/bin/rootcint at Mon Jan 26 18:17:22 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME BeamDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "BeamDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void LukeBeam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_LukeBeam(void *p);
   static void deleteArray_LukeBeam(void *p);
   static void destruct_LukeBeam(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LukeBeam*)
   {
      ::LukeBeam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LukeBeam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LukeBeam", ::LukeBeam::Class_Version(), "./LukeBeam.h", 13,
                  typeid(::LukeBeam), DefineBehavior(ptr, ptr),
                  &::LukeBeam::Dictionary, isa_proxy, 4,
                  sizeof(::LukeBeam) );
      instance.SetDelete(&delete_LukeBeam);
      instance.SetDeleteArray(&deleteArray_LukeBeam);
      instance.SetDestructor(&destruct_LukeBeam);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LukeBeam*)
   {
      return GenerateInitInstanceLocal((::LukeBeam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LukeBeam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LukeBPM_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_LukeBPM(void *p);
   static void deleteArray_LukeBPM(void *p);
   static void destruct_LukeBPM(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LukeBPM*)
   {
      ::LukeBPM *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LukeBPM >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LukeBPM", ::LukeBPM::Class_Version(), "./LukeBPM.h", 13,
                  typeid(::LukeBPM), DefineBehavior(ptr, ptr),
                  &::LukeBPM::Dictionary, isa_proxy, 4,
                  sizeof(::LukeBPM) );
      instance.SetDelete(&delete_LukeBPM);
      instance.SetDeleteArray(&deleteArray_LukeBPM);
      instance.SetDestructor(&destruct_LukeBPM);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LukeBPM*)
   {
      return GenerateInitInstanceLocal((::LukeBPM*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LukeBPM*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LukeRaster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_LukeRaster(void *p);
   static void deleteArray_LukeRaster(void *p);
   static void destruct_LukeRaster(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LukeRaster*)
   {
      ::LukeRaster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LukeRaster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LukeRaster", ::LukeRaster::Class_Version(), "./LukeRaster.h", 13,
                  typeid(::LukeRaster), DefineBehavior(ptr, ptr),
                  &::LukeRaster::Dictionary, isa_proxy, 4,
                  sizeof(::LukeRaster) );
      instance.SetDelete(&delete_LukeRaster);
      instance.SetDeleteArray(&deleteArray_LukeRaster);
      instance.SetDestructor(&destruct_LukeRaster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LukeRaster*)
   {
      return GenerateInitInstanceLocal((::LukeRaster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LukeRaster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *LukeBeam::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LukeBeam::Class_Name()
{
   return "LukeBeam";
}

//______________________________________________________________________________
const char *LukeBeam::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LukeBeam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LukeBeam::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LukeBeam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LukeBeam::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LukeBeam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LukeBeam::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LukeBeam*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *LukeBPM::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LukeBPM::Class_Name()
{
   return "LukeBPM";
}

//______________________________________________________________________________
const char *LukeBPM::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LukeBPM*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LukeBPM::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LukeBPM*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LukeBPM::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LukeBPM*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LukeBPM::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LukeBPM*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *LukeRaster::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LukeRaster::Class_Name()
{
   return "LukeRaster";
}

//______________________________________________________________________________
const char *LukeRaster::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LukeRaster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LukeRaster::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LukeRaster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LukeRaster::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LukeRaster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LukeRaster::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LukeRaster*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void LukeBeam::Streamer(TBuffer &R__b)
{
   // Stream an object of class LukeBeam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LukeBeam::Class(),this);
   } else {
      R__b.WriteClassBuffer(LukeBeam::Class(),this);
   }
}

//______________________________________________________________________________
void LukeBeam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LukeBeam.
      TClass *R__cl = ::LukeBeam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunningSumDepth", &fRunningSumDepth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunningSumWrap", &fRunningSumWrap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunningSumNext", &fRunningSumNext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRSPosition", (void*)&fRSPosition);
      R__insp.InspectMember("vector<TVector3>", (void*)&fRSPosition, "fRSPosition.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRSDirection", (void*)&fRSDirection);
      R__insp.InspectMember("vector<TVector3>", (void*)&fRSDirection, "fRSDirection.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRSAvPos", &fRSAvPos);
      R__insp.InspectMember(fRSAvPos, "fRSAvPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRSAvDir", &fRSAvDir);
      R__insp.InspectMember(fRSAvDir, "fRSAvDir.");
      THaBeam::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_LukeBeam(void *p) {
      delete ((::LukeBeam*)p);
   }
   static void deleteArray_LukeBeam(void *p) {
      delete [] ((::LukeBeam*)p);
   }
   static void destruct_LukeBeam(void *p) {
      typedef ::LukeBeam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LukeBeam

//______________________________________________________________________________
void LukeBPM::Streamer(TBuffer &R__b)
{
   // Stream an object of class LukeBPM.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LukeBPM::Class(),this);
   } else {
      R__b.WriteClassBuffer(LukeBPM::Class(),this);
   }
}

//______________________________________________________________________________
void LukeBPM::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LukeBPM.
      TClass *R__cl = ::LukeBPM::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawSignal", &fRawSignal);
      R__insp.InspectMember(fRawSignal, "fRawSignal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedestals", &fPedestals);
      R__insp.InspectMember(fPedestals, "fPedestals.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorSignal", &fCorSignal);
      R__insp.InspectMember(fCorSignal, "fCorSignal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRotPos", &fRotPos);
      R__insp.InspectMember(fRotPos, "fRotPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRot2HCSPos", &fRot2HCSPos);
      R__insp.InspectMember(fRot2HCSPos, "fRot2HCSPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOffset", &fOffset);
      R__insp.InspectMember(fOffset, "fOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosition", &fPosition);
      R__insp.InspectMember(fPosition, "fPosition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirection", &fDirection);
      R__insp.InspectMember(fDirection, "fDirection.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNfired", &fNfired);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibRot", &fCalibRot);
      THaBeamDet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_LukeBPM(void *p) {
      delete ((::LukeBPM*)p);
   }
   static void deleteArray_LukeBPM(void *p) {
      delete [] ((::LukeBPM*)p);
   }
   static void destruct_LukeBPM(void *p) {
      typedef ::LukeBPM current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LukeBPM

//______________________________________________________________________________
void LukeRaster::Streamer(TBuffer &R__b)
{
   // Stream an object of class LukeRaster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LukeRaster::Class(),this);
   } else {
      R__b.WriteClassBuffer(LukeRaster::Class(),this);
   }
}

//______________________________________________________________________________
void LukeRaster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LukeRaster.
      TClass *R__cl = ::LukeRaster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawPos", &fRawPos);
      R__insp.InspectMember(fRawPos, "fRawPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawSlope", &fRawSlope);
      R__insp.InspectMember(fRawSlope, "fRawSlope.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawPos2", &fRawPos2);
      R__insp.InspectMember(fRawPos2, "fRawPos2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawSlope2", &fRawSlope2);
      R__insp.InspectMember(fRawSlope2, "fRawSlope2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosition[3]", fPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirection", &fDirection);
      R__insp.InspectMember(fDirection, "fDirection.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRaw2Pos[3]", fRaw2Pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosOff[3]", fPosOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRasterFreq", &fRasterFreq);
      R__insp.InspectMember(fRasterFreq, "fRasterFreq.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlopePedestal", &fSlopePedestal);
      R__insp.InspectMember(fSlopePedestal, "fSlopePedestal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRasterPedestal", &fRasterPedestal);
      R__insp.InspectMember(fRasterPedestal, "fRasterPedestal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNfired", &fNfired);
      THaBeamDet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_LukeRaster(void *p) {
      delete ((::LukeRaster*)p);
   }
   static void deleteArray_LukeRaster(void *p) {
      delete [] ((::LukeRaster*)p);
   }
   static void destruct_LukeRaster(void *p) {
      typedef ::LukeRaster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LukeRaster

/********************************************************
* BeamDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableBeamDict();

extern "C" void G__set_cpp_environmentBeamDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("LukeBeam.h");
  G__add_compiledheader("LukeBPM.h");
  G__add_compiledheader("LukeRaster.h");
  G__cpp_reset_tagtableBeamDict();
}
#include <new>
extern "C" int G__cpp_dllrevBeamDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* LukeBeam */
static int G__BeamDict_250_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LukeBeam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LukeBeam(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) LukeBeam(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LukeBeam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) LukeBeam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BeamDictLN_LukeBeam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LukeBeam*) G__getstructoffset())->ClearRunningSum();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LukeBeam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeBeam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LukeBeam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LukeBeam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LukeBeam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeBeam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LukeBeam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeBeam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_250_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LukeBeam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LukeBeam G__TLukeBeam;
static int G__BeamDict_250_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LukeBeam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LukeBeam*) (soff+(sizeof(LukeBeam)*i)))->~G__TLukeBeam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LukeBeam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LukeBeam*) (soff))->~G__TLukeBeam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LukeBPM */
static int G__BeamDict_296_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LukeBPM* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LukeBPM(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) LukeBPM(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LukeBPM((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) LukeBPM((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LukeBPM((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) LukeBPM((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BeamDictLN_LukeBPM));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeBPM*) G__getstructoffset())->GetRawSignal0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeBPM*) G__getstructoffset())->GetRawSignal1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeBPM*) G__getstructoffset())->GetRawSignal2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeBPM*) G__getstructoffset())->GetRawSignal3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeBPM*) G__getstructoffset())->GetRotPosX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeBPM*) G__getstructoffset())->GetRotPosY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LukeBPM::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeBPM::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LukeBPM::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LukeBPM::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LukeBPM*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeBPM::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LukeBPM::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeBPM::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_296_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LukeBPM::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LukeBPM G__TLukeBPM;
static int G__BeamDict_296_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LukeBPM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LukeBPM*) (soff+(sizeof(LukeBPM)*i)))->~G__TLukeBPM();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LukeBPM*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LukeBPM*) (soff))->~G__TLukeBPM();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LukeRaster */
static int G__BeamDict_297_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LukeRaster* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LukeRaster(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) LukeRaster(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LukeRaster((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) LukeRaster((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LukeRaster((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) LukeRaster((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BeamDictLN_LukeRaster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetRawPosX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetRawPosY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetRawSlopeX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetRawSlopeY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosBPMAX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosBPMAY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosBPMAZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosBPMBX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosBPMBY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosBPMBZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosTarX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosTarY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LukeRaster*) G__getstructoffset())->GetPosTarZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LukeRaster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeRaster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LukeRaster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LukeRaster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LukeRaster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeRaster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LukeRaster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LukeRaster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BeamDict_297_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LukeRaster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LukeRaster G__TLukeRaster;
static int G__BeamDict_297_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LukeRaster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LukeRaster*) (soff+(sizeof(LukeRaster)*i)))->~G__TLukeRaster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LukeRaster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LukeRaster*) (soff))->~G__TLukeRaster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* LukeBeam */

/* LukeBPM */

/* LukeRaster */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncBeamDict {
 public:
  G__Sizep2memfuncBeamDict(): p(&G__Sizep2memfuncBeamDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncBeamDict::*p)();
};

size_t G__get_sizep2memfuncBeamDict()
{
  G__Sizep2memfuncBeamDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceBeamDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam))) {
     LukeBeam *G__Lderived;
     G__Lderived=(LukeBeam*)0x1000;
     {
       THaBeam *G__Lpbase=(THaBeam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam),G__get_linked_tagnum(&G__BeamDictLN_THaBeam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaApparatus *G__Lpbase=(THaApparatus*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam),G__get_linked_tagnum(&G__BeamDictLN_THaApparatus),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam),G__get_linked_tagnum(&G__BeamDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam),G__get_linked_tagnum(&G__BeamDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam),G__get_linked_tagnum(&G__BeamDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaBeamModule *G__Lpbase=(THaBeamModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam),G__get_linked_tagnum(&G__BeamDictLN_THaBeamModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM))) {
     LukeBPM *G__Lderived;
     G__Lderived=(LukeBPM*)0x1000;
     {
       THaBeamDet *G__Lpbase=(THaBeamDet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM),G__get_linked_tagnum(&G__BeamDictLN_THaBeamDet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM),G__get_linked_tagnum(&G__BeamDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM),G__get_linked_tagnum(&G__BeamDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM),G__get_linked_tagnum(&G__BeamDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM),G__get_linked_tagnum(&G__BeamDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM),G__get_linked_tagnum(&G__BeamDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster))) {
     LukeRaster *G__Lderived;
     G__Lderived=(LukeRaster*)0x1000;
     {
       THaBeamDet *G__Lpbase=(THaBeamDet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster),G__get_linked_tagnum(&G__BeamDictLN_THaBeamDet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster),G__get_linked_tagnum(&G__BeamDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster),G__get_linked_tagnum(&G__BeamDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster),G__get_linked_tagnum(&G__BeamDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster),G__get_linked_tagnum(&G__BeamDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster),G__get_linked_tagnum(&G__BeamDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableBeamDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__BeamDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__BeamDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__BeamDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__BeamDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__BeamDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__BeamDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVector3>",117,G__get_linked_tagnum(&G__BeamDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__BeamDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BeamDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BeamDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__BeamDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* LukeBeam */
static void G__setup_memvarLukeBeam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam));
   { LukeBeam *p; p=(LukeBeam*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fRunningSumDepth)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fRunningSumDepth=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fRunningSumWrap=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRunningSumNext=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),G__defined_typename("vector<TVector3>"),-1,2,"fRSPosition=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR),G__defined_typename("vector<TVector3>"),-1,2,"fRSDirection=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVector3),-1,-1,2,"fRSAvPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVector3),-1,-1,2,"fRSAvDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BeamDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LukeBPM */
static void G__setup_memvarLukeBPM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM));
   { LukeBPM *p; p=(LukeBPM*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fRawSignal=",0,"induced signal of the antennas");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fPedestals=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fCorSignal=",0,"pedestal subtracted signal");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fRotPos=",0,"position in the BPM system, arbitrary units");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTlEfloatgR),G__defined_typename("TMatrix"),-1,2,"fRot2HCSPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVector3),-1,-1,2,"fOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVector3),-1,-1,2,"fPosition=",0,"Beam position at the BPM (meters)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVector3),-1,-1,2,"fDirection=",0,"Beam direction at the BPM");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNfired=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCalibRot=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BeamDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LukeRaster */
static void G__setup_memvarLukeRaster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster));
   { LukeRaster *p; p=(LukeRaster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fRawPos=",0,"current in Raster ADCs for position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fRawSlope=",0,"current in Raster ADCs for the derivative");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fRawPos2=",0,"current in Raster ADCs for position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fRawSlope2=",0,"current in Raster ADCs for the derivative");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVector3),-1,-1,2,"fPosition[3]=",0,"Beam position at 1st, 2nd BPM or at the target (meters)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVector3),-1,-1,2,"fDirection=",0,"Beam angle at the target (meters)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TMatrixTlEfloatgR),G__defined_typename("TMatrix"),-1,2,"fRaw2Pos[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVector3),-1,-1,2,"fPosOff[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fRasterFreq=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fSlopePedestal=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__BeamDictLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,2,"fRasterPedestal=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNfired=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BeamDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarBeamDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncLukeBeam(void) {
   /* LukeBeam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBeam));
   G__memfunc_setup("LukeBeam",774,G__BeamDict_250_0_1, 105, G__get_linked_tagnum(&G__BeamDictLN_LukeBeam), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - description "
"i - 'Int_t' 0 '0' runningsum_depth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reconstruct",1180,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearRunningSum",1533,G__BeamDict_250_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BeamDict_250_0_4, 85, G__get_linked_tagnum(&G__BeamDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LukeBeam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BeamDict_250_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeBeam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BeamDict_250_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LukeBeam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BeamDict_250_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LukeBeam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BeamDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BeamDict_250_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BeamDict_250_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeBeam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BeamDict_250_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LukeBeam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BeamDict_250_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeBeam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BeamDict_250_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LukeBeam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~LukeBeam", 900, G__BeamDict_250_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLukeBPM(void) {
   /* LukeBPM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeBPM));
   G__memfunc_setup("LukeBPM",624,G__BeamDict_296_0_1, 105, G__get_linked_tagnum(&G__BeamDictLN_LukeBPM), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPosition",1141,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__BeamDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDirection",1217,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__BeamDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawSignal0",1240,G__BeamDict_296_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSignal1",1241,G__BeamDict_296_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSignal2",1242,G__BeamDict_296_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSignal3",1243,G__BeamDict_296_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRotPosX",991,G__BeamDict_296_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRotPosY",992,G__BeamDict_296_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__BeamDictLN_LukeBPM), -1, 1, 1, 1, 2, 0, "u 'LukeBPM' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BeamDict_296_0_16, 85, G__get_linked_tagnum(&G__BeamDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LukeBPM::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BeamDict_296_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeBPM::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BeamDict_296_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LukeBPM::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BeamDict_296_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LukeBPM::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BeamDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BeamDict_296_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BeamDict_296_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeBPM::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BeamDict_296_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LukeBPM::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BeamDict_296_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeBPM::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BeamDict_296_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LukeBPM::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~LukeBPM", 750, G__BeamDict_296_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLukeRaster(void) {
   /* LukeRaster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BeamDictLN_LukeRaster));
   G__memfunc_setup("LukeRaster",1026,G__BeamDict_297_0_1, 105, G__get_linked_tagnum(&G__BeamDictLN_LukeRaster), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPosition",1141,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__BeamDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDirection",1217,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__BeamDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRawPosX",980,G__BeamDict_297_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawPosY",981,G__BeamDict_297_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSlopeX",1189,G__BeamDict_297_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawSlopeY",1190,G__BeamDict_297_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosBPMAX",970,G__BeamDict_297_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosBPMAY",971,G__BeamDict_297_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosBPMAZ",972,G__BeamDict_297_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosBPMBX",971,G__BeamDict_297_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosBPMBY",972,G__BeamDict_297_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosBPMBZ",973,G__BeamDict_297_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosTarX",977,G__BeamDict_297_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosTarY",978,G__BeamDict_297_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosTarZ",979,G__BeamDict_297_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__BeamDictLN_LukeRaster), -1, 1, 1, 1, 2, 0, "u 'LukeRaster' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BeamDict_297_0_23, 85, G__get_linked_tagnum(&G__BeamDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LukeRaster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BeamDict_297_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeRaster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BeamDict_297_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LukeRaster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BeamDict_297_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LukeRaster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BeamDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BeamDict_297_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BeamDict_297_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeRaster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BeamDict_297_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LukeRaster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BeamDict_297_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LukeRaster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BeamDict_297_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LukeRaster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~LukeRaster", 1152, G__BeamDict_297_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncBeamDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalBeamDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcBeamDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__BeamDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaEvData = { "THaEvData" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaAnalysisObject = { "THaAnalysisObject" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaAnalysisObjectcLcLEMode = { "THaAnalysisObject::EMode" , 101 , -1 };
G__linked_taginfo G__BeamDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaDetector = { "THaDetector" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaApparatus = { "THaApparatus" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaBeam = { "THaBeam" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaBeamModule = { "THaBeamModule" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_LukeBeam = { "LukeBeam" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR = { "vector<TVector3,allocator<TVector3> >" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVector3,allocator<TVector3> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaDetectorBase = { "THaDetectorBase" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_THaBeamDet = { "THaBeamDet" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_LukeBPM = { "LukeBPM" , 99 , -1 };
G__linked_taginfo G__BeamDictLN_LukeRaster = { "LukeRaster" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableBeamDict() {
  G__BeamDictLN_TClass.tagnum = -1 ;
  G__BeamDictLN_TBuffer.tagnum = -1 ;
  G__BeamDictLN_TMemberInspector.tagnum = -1 ;
  G__BeamDictLN_TObject.tagnum = -1 ;
  G__BeamDictLN_TNamed.tagnum = -1 ;
  G__BeamDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__BeamDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BeamDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__BeamDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BeamDictLN_TDatime.tagnum = -1 ;
  G__BeamDictLN_THaEvData.tagnum = -1 ;
  G__BeamDictLN_TVector3.tagnum = -1 ;
  G__BeamDictLN_THaAnalysisObject.tagnum = -1 ;
  G__BeamDictLN_THaAnalysisObjectcLcLEMode.tagnum = -1 ;
  G__BeamDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__BeamDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BeamDictLN_THaDetector.tagnum = -1 ;
  G__BeamDictLN_THaApparatus.tagnum = -1 ;
  G__BeamDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__BeamDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__BeamDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__BeamDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__BeamDictLN_THaBeam.tagnum = -1 ;
  G__BeamDictLN_THaBeamModule.tagnum = -1 ;
  G__BeamDictLN_LukeBeam.tagnum = -1 ;
  G__BeamDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR.tagnum = -1 ;
  G__BeamDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BeamDictLN_THaDetectorBase.tagnum = -1 ;
  G__BeamDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__BeamDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BeamDictLN_THaBeamDet.tagnum = -1 ;
  G__BeamDictLN_LukeBPM.tagnum = -1 ;
  G__BeamDictLN_LukeRaster.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableBeamDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TDatime);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaEvData);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaAnalysisObject);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaAnalysisObjectcLcLEMode);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaDetector);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaApparatus);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaBeam);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaBeamModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BeamDictLN_LukeBeam),sizeof(LukeBeam),-1,324608,"A beam with unrastered beam, analyzed event by event",G__setup_memvarLukeBeam,G__setup_memfuncLukeBeam);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_vectorlETVector3cOallocatorlETVector3gRsPgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_reverse_iteratorlEvectorlETVector3cOallocatorlETVector3gRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaDetectorBase);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BeamDictLN_THaBeamDet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BeamDictLN_LukeBPM),sizeof(LukeBPM),-1,326656,"Generic BPM class",G__setup_memvarLukeBPM,G__setup_memfuncLukeBPM);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BeamDictLN_LukeRaster),sizeof(LukeRaster),-1,326656,"Generic Raster class",G__setup_memvarLukeRaster,G__setup_memfuncLukeRaster);
}
extern "C" void G__cpp_setupBeamDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupBeamDict()");
  G__set_cpp_environmentBeamDict();
  G__cpp_setup_tagtableBeamDict();

  G__cpp_setup_inheritanceBeamDict();

  G__cpp_setup_typetableBeamDict();

  G__cpp_setup_memvarBeamDict();

  G__cpp_setup_memfuncBeamDict();
  G__cpp_setup_globalBeamDict();
  G__cpp_setup_funcBeamDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncBeamDict();
  return;
}
class G__cpp_setup_initBeamDict {
  public:
    G__cpp_setup_initBeamDict() { G__add_setup_func("BeamDict",(G__incsetup)(&G__cpp_setupBeamDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initBeamDict() { G__remove_setup_func("BeamDict"); }
};
G__cpp_setup_initBeamDict G__cpp_setup_initializerBeamDict;

