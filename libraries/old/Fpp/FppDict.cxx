//
// File generated by /opt/ROOT/pro/bin/rootcint at Tue Mar  4 09:42:38 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME FppDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "FppDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void THaFppPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_THaFppPlane(void *p = 0);
   static void *newArray_THaFppPlane(Long_t size, void *p);
   static void delete_THaFppPlane(void *p);
   static void deleteArray_THaFppPlane(void *p);
   static void destruct_THaFppPlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::THaFppPlane*)
   {
      ::THaFppPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::THaFppPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("THaFppPlane", ::THaFppPlane::Class_Version(), "./THaFppPlane.h", 18,
                  typeid(::THaFppPlane), DefineBehavior(ptr, ptr),
                  &::THaFppPlane::Dictionary, isa_proxy, 4,
                  sizeof(::THaFppPlane) );
      instance.SetNew(&new_THaFppPlane);
      instance.SetNewArray(&newArray_THaFppPlane);
      instance.SetDelete(&delete_THaFppPlane);
      instance.SetDeleteArray(&deleteArray_THaFppPlane);
      instance.SetDestructor(&destruct_THaFppPlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::THaFppPlane*)
   {
      return GenerateInitInstanceLocal((::THaFppPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::THaFppPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void THaFpp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_THaFpp(void *p);
   static void deleteArray_THaFpp(void *p);
   static void destruct_THaFpp(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::THaFpp*)
   {
      ::THaFpp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::THaFpp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("THaFpp", ::THaFpp::Class_Version(), "./THaFpp.h", 22,
                  typeid(::THaFpp), DefineBehavior(ptr, ptr),
                  &::THaFpp::Dictionary, isa_proxy, 4,
                  sizeof(::THaFpp) );
      instance.SetDelete(&delete_THaFpp);
      instance.SetDeleteArray(&deleteArray_THaFpp);
      instance.SetDestructor(&destruct_THaFpp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::THaFpp*)
   {
      return GenerateInitInstanceLocal((::THaFpp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::THaFpp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void THaFppHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_THaFppHit(void *p = 0);
   static void *newArray_THaFppHit(Long_t size, void *p);
   static void delete_THaFppHit(void *p);
   static void deleteArray_THaFppHit(void *p);
   static void destruct_THaFppHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::THaFppHit*)
   {
      ::THaFppHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::THaFppHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("THaFppHit", ::THaFppHit::Class_Version(), "./THaFppHit.h", 13,
                  typeid(::THaFppHit), DefineBehavior(ptr, ptr),
                  &::THaFppHit::Dictionary, isa_proxy, 4,
                  sizeof(::THaFppHit) );
      instance.SetNew(&new_THaFppHit);
      instance.SetNewArray(&newArray_THaFppHit);
      instance.SetDelete(&delete_THaFppHit);
      instance.SetDeleteArray(&deleteArray_THaFppHit);
      instance.SetDestructor(&destruct_THaFppHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::THaFppHit*)
   {
      return GenerateInitInstanceLocal((::THaFppHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::THaFppHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *THaFppPlane::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *THaFppPlane::Class_Name()
{
   return "THaFppPlane";
}

//______________________________________________________________________________
const char *THaFppPlane::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THaFppPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int THaFppPlane::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THaFppPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void THaFppPlane::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THaFppPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *THaFppPlane::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THaFppPlane*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *THaFpp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *THaFpp::Class_Name()
{
   return "THaFpp";
}

//______________________________________________________________________________
const char *THaFpp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THaFpp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int THaFpp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THaFpp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void THaFpp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THaFpp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *THaFpp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THaFpp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *THaFppHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *THaFppHit::Class_Name()
{
   return "THaFppHit";
}

//______________________________________________________________________________
const char *THaFppHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THaFppHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int THaFppHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::THaFppHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void THaFppHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THaFppHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *THaFppHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::THaFppHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void THaFpp::Streamer(TBuffer &R__b)
{
   // Stream an object of class THaFpp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(THaFpp::Class(),this);
   } else {
      R__b.WriteClassBuffer(THaFpp::Class(),this);
   }
}

//______________________________________________________________________________
void THaFpp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class THaFpp.
      TClass *R__cl = ::THaFpp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPlane[24]", &fPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackProj", &fTrackProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTNHits", &fTNHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTNGHits", &fTNGHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "align", &align);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "align_opt", &align_opt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calib", &calib);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calib_opt", &calib_opt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ana_front", &ana_front);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ana_rear", &ana_rear);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pulser_fpp", &pulser_fpp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evdisplay", &evdisplay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mkjtrack", &mkjtrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdX", &fdX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdY", &fdY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdZ", &fdZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngle", &fAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZZ", &fZZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCarbonX", &fCarbonX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCarbonY", &fCarbonY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCarbonZ", &fCarbonZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCarbondX", &fCarbondX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCarbondY", &fCarbondY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCarbondZ", &fCarbondZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCarbZZ", &fCarbZZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOff[40][24]", fTOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTAdd[40][24]", fTAdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrftDstPara[24][7]", fDrftDstPara);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM1Front[6][4]", fM1Front);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM1Rear[6][4]", fM1Rear);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDemuxCut[24][35][9]", fDemuxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPHits[24][35][8]", fPHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPSum[24][35][8]", fPSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPCentr[24][35][8]", fPCentr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPWidth[24][35][8]", fPWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZcarbonmin", &fZcarbonmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZcarbonmax", &fZcarbonmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZcarbon", &fZcarbon);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWSpacing[24]", fWSpacing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWspacingr", &fWspacingr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWspacingf", &fWspacingf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZfpp[24]", fZfpp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmid[24]", fZmid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUVX_first[24]", fUVX_first);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUVXzero[24]", fUVXzero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZshift[24]", fZshift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUVX_shift[24]", fUVX_shift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTHits[40][24]", fTHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTSum[40][24]", fTSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTHist[80][40][24]", fTHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT0[40][24]", fT0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUVrot[24]", fUVrot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZUrot[24]", fZUrot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZVrot[24]", fZVrot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUVno[24]", fUVno);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHits[5][35][24]", fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrack[40][25]", fTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNGHits[24]", fNGHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHits[25]", fNHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrackfu", &ntrackfu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrackfv", &ntrackfv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrackrv", &ntrackrv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrackru", &ntrackru);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "conetest", &conetest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "coneteste", &coneteste);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "coneteste_frvdc", &coneteste_frvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "coneteste_cfrvdc", &coneteste_cfrvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_fa", &x_fa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_fa", &y_fa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_fb", &x_fb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_fb", &y_fb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "th_f", &th_f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_f", &ph_f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_r", &x_r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_r", &y_r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "th_r", &th_r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_r", &ph_r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_x", &x_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_diff_f", &x_diff_f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_diff_f", &y_diff_f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_diff_r", &x_diff_r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y_diff_r", &y_diff_r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_diff_x", &x_diff_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "th_diff_f", &th_diff_f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_diff_f", &ph_diff_f);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "th_diff_r", &th_diff_r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_diff_r", &ph_diff_r);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "th_sc", &th_sc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_sc", &ph_sc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "th_az", &th_az);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_az", &ph_az);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "th_az_frvdc", &th_az_frvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_az_frvdc", &ph_az_frvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "th_az_cfrvdc", &th_az_cfrvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ph_az_cfrvdc", &ph_az_cfrvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zclose", &zclose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sclose", &sclose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zclose_frvdc", &zclose_frvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sclose_frvdc", &sclose_frvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zclose_cfrvdc", &zclose_cfrvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sclose_cfrvdc", &sclose_cfrvdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chisqfu", &chisqfu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chisqfv", &chisqfv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chisqru", &chisqru);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chisqrv", &chisqrv);
      THaNonTrackingDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_THaFpp(void *p) {
      delete ((::THaFpp*)p);
   }
   static void deleteArray_THaFpp(void *p) {
      delete [] ((::THaFpp*)p);
   }
   static void destruct_THaFpp(void *p) {
      typedef ::THaFpp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::THaFpp

//______________________________________________________________________________
void THaFppPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class THaFppPlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(THaFppPlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(THaFppPlane::Class(),this);
   }
}

//______________________________________________________________________________
void THaFppPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class THaFppPlane.
      TClass *R__cl = ::THaFppPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGHits", &fGHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fName", &fName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitcount", &hitcount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdX", &fdX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdY", &fdY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdZ", &fdZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZZ", &fZZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNWire", &fNWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWangle", &fWangle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWspacing", &fWspacing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUVXzero", &fUVXzero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXoff", &fXoff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYoff", &fYoff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhoff", &fPhoff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThoff", &fThoff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPsoff", &fPsoff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStrawd", &fStrawd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "itrgood", &itrgood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "strwgood", &strwgood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "strwbad", &strwbad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFpp", &fFpp);
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_THaFppPlane(void *p) {
      return  p ? new(p) ::THaFppPlane : new ::THaFppPlane;
   }
   static void *newArray_THaFppPlane(Long_t nElements, void *p) {
      return p ? new(p) ::THaFppPlane[nElements] : new ::THaFppPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_THaFppPlane(void *p) {
      delete ((::THaFppPlane*)p);
   }
   static void deleteArray_THaFppPlane(void *p) {
      delete [] ((::THaFppPlane*)p);
   }
   static void destruct_THaFppPlane(void *p) {
      typedef ::THaFppPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::THaFppPlane

//______________________________________________________________________________
void THaFppHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class THaFppHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(THaFppHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(THaFppHit::Class(),this);
   }
}

//______________________________________________________________________________
void THaFppHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class THaFppHit.
      TClass *R__cl = ::THaFppHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWire", &fWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLtdc", &fLtdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTtdc", &fTtdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStraw", &fStraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth", &fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDist", &fDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResidual", &fResidual);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_THaFppHit(void *p) {
      return  p ? new(p) ::THaFppHit : new ::THaFppHit;
   }
   static void *newArray_THaFppHit(Long_t nElements, void *p) {
      return p ? new(p) ::THaFppHit[nElements] : new ::THaFppHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_THaFppHit(void *p) {
      delete ((::THaFppHit*)p);
   }
   static void deleteArray_THaFppHit(void *p) {
      delete [] ((::THaFppHit*)p);
   }
   static void destruct_THaFppHit(void *p) {
      typedef ::THaFppHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::THaFppHit

/********************************************************
* FppDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableFppDict();

extern "C" void G__set_cpp_environmentFppDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("THaFpp.h");
  G__add_compiledheader("THaFppPlane.h");
  G__add_compiledheader("THaFppHit.h");
  G__cpp_reset_tagtableFppDict();
}
#include <new>
extern "C" int G__cpp_dllrevFppDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* THaFppPlane */
static int G__FppDict_259_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THaFppPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFppPlane(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) THaFppPlane(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFppPlane((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) THaFppPlane((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFppPlane((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) THaFppPlane((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new THaFppPlane[n];
       } else {
         p = new((void*) gvp) THaFppPlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new THaFppPlane;
       } else {
         p = new((void*) gvp) THaFppPlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FppDictLN_THaFppPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const THaFppPlane*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const THaFppPlane*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const THaFppPlane*) G__getstructoffset())->GetHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const THaFppPlane*) G__getstructoffset())->GetNGHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const THaFppPlane*) G__getstructoffset())->GetGHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const THaFppPlane*) G__getstructoffset())->GetGHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetdX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetdY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetdZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetZZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const THaFppPlane*) G__getstructoffset())->GetNWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetWAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetWSpac());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetUVX0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetXoff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetYoff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetPhoff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetThoff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetPsoff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppPlane*) G__getstructoffset())->GetStrawd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppPlane*) G__getstructoffset())->Setitrgd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppPlane*) G__getstructoffset())->Setstrwgd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppPlane*) G__getstructoffset())->Setstrwbd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) THaFppPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFppPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) THaFppPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      THaFppPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFppPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THaFppPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFppPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_259_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THaFppPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef THaFppPlane G__TTHaFppPlane;
static int G__FppDict_259_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (THaFppPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((THaFppPlane*) (soff+(sizeof(THaFppPlane)*i)))->~G__TTHaFppPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (THaFppPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((THaFppPlane*) (soff))->~G__TTHaFppPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* THaFpp */
static int G__FppDict_260_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THaFpp* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFpp(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) THaFpp(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFpp((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) THaFpp((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFpp((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) THaFpp((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FppDictLN_THaFpp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) THaFpp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFpp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) THaFpp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      THaFpp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFpp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFpp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THaFpp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFpp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_260_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THaFpp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef THaFpp G__TTHaFpp;
static int G__FppDict_260_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (THaFpp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((THaFpp*) (soff+(sizeof(THaFpp)*i)))->~G__TTHaFpp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (THaFpp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((THaFpp*) (soff))->~G__TTHaFpp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* THaFppHit */
static int G__FppDict_265_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   THaFppHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFppHit(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) THaFppHit(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFppHit((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) THaFppHit((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new THaFppHit((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) THaFppHit((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new THaFppHit[n];
       } else {
         p = new((void*) gvp) THaFppHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new THaFppHit;
       } else {
         p = new((void*) gvp) THaFppHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FppDictLN_THaFppHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const THaFppHit*) G__getstructoffset())->GetWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppHit*) G__getstructoffset())->GetLEtime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppHit*) G__getstructoffset())->GetTEtime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppHit*) G__getstructoffset())->GetStraw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppHit*) G__getstructoffset())->GetWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppHit*) G__getstructoffset())->GetDrftDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const THaFppHit*) G__getstructoffset())->GetResidual());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppHit*) G__getstructoffset())->SetWire((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppHit*) G__getstructoffset())->SetLETime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppHit*) G__getstructoffset())->SetTETime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppHit*) G__getstructoffset())->SetStraw((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppHit*) G__getstructoffset())->SetWidth((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppHit*) G__getstructoffset())->SetDrftDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppHit*) G__getstructoffset())->SetResidual((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) THaFppHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFppHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) THaFppHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      THaFppHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((THaFppHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFppHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THaFppHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) THaFppHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FppDict_265_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) THaFppHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef THaFppHit G__TTHaFppHit;
static int G__FppDict_265_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (THaFppHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((THaFppHit*) (soff+(sizeof(THaFppHit)*i)))->~G__TTHaFppHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (THaFppHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((THaFppHit*) (soff))->~G__TTHaFppHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* THaFppPlane */

/* THaFpp */

/* THaFppHit */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncFppDict {
 public:
  G__Sizep2memfuncFppDict(): p(&G__Sizep2memfuncFppDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncFppDict::*p)();
};

size_t G__get_sizep2memfuncFppDict()
{
  G__Sizep2memfuncFppDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceFppDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FppDictLN_THaFppPlane))) {
     THaFppPlane *G__Lderived;
     G__Lderived=(THaFppPlane*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppPlane),G__get_linked_tagnum(&G__FppDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppPlane),G__get_linked_tagnum(&G__FppDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppPlane),G__get_linked_tagnum(&G__FppDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppPlane),G__get_linked_tagnum(&G__FppDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppPlane),G__get_linked_tagnum(&G__FppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FppDictLN_THaFpp))) {
     THaFpp *G__Lderived;
     G__Lderived=(THaFpp*)0x1000;
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp),G__get_linked_tagnum(&G__FppDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp),G__get_linked_tagnum(&G__FppDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp),G__get_linked_tagnum(&G__FppDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp),G__get_linked_tagnum(&G__FppDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp),G__get_linked_tagnum(&G__FppDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp),G__get_linked_tagnum(&G__FppDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp),G__get_linked_tagnum(&G__FppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FppDictLN_THaSubDetector))) {
     THaSubDetector *G__Lderived;
     G__Lderived=(THaSubDetector*)0x1000;
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaSubDetector),G__get_linked_tagnum(&G__FppDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaSubDetector),G__get_linked_tagnum(&G__FppDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaSubDetector),G__get_linked_tagnum(&G__FppDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaSubDetector),G__get_linked_tagnum(&G__FppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FppDictLN_THaFppHit))) {
     THaFppHit *G__Lderived;
     G__Lderived=(THaFppHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppHit),G__get_linked_tagnum(&G__FppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableFppDict() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__FppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__FppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__FppDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FppDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FppDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__FppDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__FppDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__FppDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__FppDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FppDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FppDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__FppDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__FppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__FppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__FppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* THaFppPlane */
static void G__setup_memvarTHaFppPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppPlane));
   { THaFppPlane *p; p=(THaFppPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"fMaxHit=35LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FppDictLN_TClonesArray),-1,-1,2,"fHits=",0,"Hits ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FppDictLN_TClonesArray),-1,-1,2,"fGHits=",0,"Good hits ");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,2,"fName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"hitcount=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdX=",0,"Size: numbers are 1/2 widths");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNWire=",0,"Number of wires in plane");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWangle=",0,"Wire angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWspacing=",0,"Wire spacing");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUVXzero=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXoff=",0,"X offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYoff=",0,"Y offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhoff=",0,"Phi offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fThoff=",0,"Theta offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPsoff=",0,"Psi offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStrawd=",0,"straw diameter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"itrgood=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"strwgood=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"strwbad=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FppDictLN_THaDetectorBase),-1,-1,2,"fFpp=",0,"Fpp detector to which this plane belongs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FppDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* THaFpp */
static void G__setup_memvarTHaFpp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp));
   { THaFpp *p; p=(THaFpp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FppDictLN_THaFppPlane),-1,-1,2,"fPlane[24]=",0,"Fpp planes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FppDictLN_TClonesArray),-1,-1,2,"fTrackProj=",0,"projection of track onto straw plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTNHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTNGHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"align=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"align_opt=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"calib=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"calib_opt=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ana_front=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ana_rear=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"pulser_fpp=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"evdisplay=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mkjtrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAngle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCarbonX=",0,"Origin of carbon analyzer");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCarbonY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCarbonZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCarbondX=",0,"Size of carbon analyzer,  in 1/2 widths");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCarbondY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCarbondZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCarbZZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTOff[40][24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTAdd[40][24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDrftDstPara[24][7]=",0,"Drift distribution parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fM1Front[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fM1Rear[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDemuxCut[24][35][9]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPHits[24][35][8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPSum[24][35][8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPCentr[24][35][8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPWidth[24][35][8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZcarbonmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZcarbonmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZcarbon=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWSpacing[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWspacingr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWspacingf=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZfpp[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZmid[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUVX_first[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUVXzero[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZshift[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUVX_shift[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTHits[40][24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTSum[40][24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fTHist[80][40][24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fT0[40][24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUVrot[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZUrot[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZVrot[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUVno[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fHits[5][35][24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrack[40][25]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNGHits[24]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNHits[25]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ntrackfu=",0,"# of tracks for front U ch.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ntrackfv=",0,"# of tracks for front V ch.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ntrackrv=",0,"# of tracks for rear V ch.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ntrackru=",0,"# of tracks for rear U ch.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"conetest=",0,"+1 if passed, -1 if failed conetest");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"coneteste=",0,"Ed Brash's new conetest");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"coneteste_frvdc=",0,"conetest front vs vdc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"coneteste_cfrvdc=",0,"conetest crude front vs vdc");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x_fa=",0,"x at z=0 from FPP front chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y_fa=",0,"y at z=0 from FPP front chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x_fb=",0,"x at z=.350 from FPP front chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y_fb=",0,"y at z=.350 from FPP front chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"th_f=",0,"theta from FPP front chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ph_f=",0,"phi from FPP front chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x_r=",0,"x at z=.350 from FPP rear chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y_r=",0,"y at z=.350 from FPP rear chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"th_r=",0,"theta from FPP rear chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ph_r=",0,"phi from FPP rear chambers");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x_x=",0,"x at z=.350 from FPP X-Straws");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x_diff_f=",0,"diff in X (VDC vs. FPP Front Chs.)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y_diff_f=",0,"diff in Y (VDC vs. FPP Front Chs.)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x_diff_r=",0,"diff in X (FPP Front vs. FPP Rear Chs.)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"y_diff_r=",0,"diff in Y (FPP Front vs. FPP Rear Chs.)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"x_diff_x=",0,"diff in X (FPP Front vs. FPP X straws)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"th_diff_f=",0,"diff in Theta (VDC vs. FPP Front Chs.)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ph_diff_f=",0,"diff in Phi (VDC vs. FPP Front Chs.)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"th_diff_r=",0,"diff in Theta (FPP Front vs. FPP Rear Chs.)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ph_diff_r=",0,"diff in Phi (FPP Front vs. FPP Rear Chs.)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"th_sc=",0,"Theta scattered");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ph_sc=",0,"Phi scattered");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"th_az=",0,"Theta scattered (polar coordinates)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ph_az=",0,"Phi scattered (polar coordinates)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"th_az_frvdc=",0,"Theta scattered (polar coordinates) front vs vdc");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ph_az_frvdc=",0,"Phi scattered (polar coordinates) front vs vdc");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"th_az_cfrvdc=",0,"Theta scattered (polar coordinates) crude front vs vdc");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ph_az_cfrvdc=",0,"Phi scattered (polar coordinates) crude front vs vdc");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zclose=",0,"Z of closest approach of front/rear tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sclose=",0,"distance of closest approach of f/r tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zclose_frvdc=",0,"Z of closest approach of  front vs vdc tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sclose_frvdc=",0,"distance of closest approach of front vs vdc tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zclose_cfrvdc=",0,"Z of closest approach of  crude front vs vdc tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"sclose_cfrvdc=",0,"distance of closest approach of crude front vs vdc tracks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"chisqfu=",0,"chisq for front chamber u track ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"chisqfv=",0,"chisq for front chamber v track ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"chisqru=",0,"chisq for rear  chamber u track ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"chisqrv=",0,"chisq for rear  chamber v track ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FppDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* THaFppHit */
static void G__setup_memvarTHaFppHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppHit));
   { THaFppHit *p; p=(THaFppHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fWire=",0,"Wire group number");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLtdc=",0,"Leading TDC value  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTtdc=",0,"Trailing TDC value ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStraw=",0,"Straw number, after demultiplexing");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDist=",0,"Drift distance to wire");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fResidual=",0,"Residual");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FppDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarFppDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTHaFppPlane(void) {
   /* THaFppPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppPlane));
   G__memfunc_setup("THaFppPlane",1043,G__FppDict_259_0_1, 105, G__get_linked_tagnum(&G__FppDictLN_THaFppPlane), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' description "
"U 'THaDetectorBase' - 0 'NULL' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", "Raw data -> hits", (void*) NULL, 1);
   G__memfunc_setup("GetNHits",774,G__FppDict_259_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__FppDict_259_0_4, 85, G__get_linked_tagnum(&G__FppDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__FppDict_259_0_5, 85, G__get_linked_tagnum(&G__FppDictLN_THaFppHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNGHits",845,G__FppDict_259_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGHits",767,G__FppDict_259_0_7, 85, G__get_linked_tagnum(&G__FppDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGHit",652,G__FppDict_259_0_8, 85, G__get_linked_tagnum(&G__FppDictLN_THaFppHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__FppDict_259_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__FppDict_259_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__FppDict_259_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetdX",476,G__FppDict_259_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Size: numbers are 1/2 widths", (void*) NULL, 0);
   G__memfunc_setup("GetdY",477,G__FppDict_259_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetdZ",478,G__FppDict_259_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZZ",468,G__FppDict_259_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNWire",773,G__FppDict_259_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of wires in plane", (void*) NULL, 0);
   G__memfunc_setup("GetWAngle",862,G__FppDict_259_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Wire angle", (void*) NULL, 0);
   G__memfunc_setup("GetWSpac",766,G__FppDict_259_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Wire spacing", (void*) NULL, 0);
   G__memfunc_setup("GetUVX0",595,G__FppDict_259_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXoff",691,G__FppDict_259_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "X offset", (void*) NULL, 0);
   G__memfunc_setup("GetYoff",692,G__FppDict_259_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Y offset", (void*) NULL, 0);
   G__memfunc_setup("GetPhoff",787,G__FppDict_259_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Phi offset", (void*) NULL, 0);
   G__memfunc_setup("GetThoff",791,G__FppDict_259_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Theta offset", (void*) NULL, 0);
   G__memfunc_setup("GetPsoff",798,G__FppDict_259_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Psi offset", (void*) NULL, 0);
   G__memfunc_setup("GetStrawd",917,G__FppDict_259_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "straw diameter", (void*) NULL, 0);
   G__memfunc_setup("Setitrgd",838,G__FppDict_259_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - itr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setstrwgd",967,G__FppDict_259_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setstrwbd",962,G__FppDict_259_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - strb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FppDict_259_0_32, 85, G__get_linked_tagnum(&G__FppDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&THaFppPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FppDict_259_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFppPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FppDict_259_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&THaFppPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FppDict_259_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&THaFppPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FppDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FppDict_259_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FppDict_259_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFppPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FppDict_259_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THaFppPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FppDict_259_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFppPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FppDict_259_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THaFppPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~THaFppPlane", 1169, G__FppDict_259_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTHaFpp(void) {
   /* THaFpp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FppDictLN_THaFpp));
   G__memfunc_setup("THaFpp",547,G__FppDict_260_0_1, 105, G__get_linked_tagnum(&G__FppDictLN_THaFpp), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__FppDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 - run", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FppDict_260_0_10, 85, G__get_linked_tagnum(&G__FppDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&THaFpp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FppDict_260_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFpp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FppDict_260_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&THaFpp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FppDict_260_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&THaFpp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FppDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FppDict_260_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FppDict_260_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFpp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FppDict_260_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THaFpp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FppDict_260_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFpp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FppDict_260_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THaFpp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~THaFpp", 673, G__FppDict_260_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTHaFppHit(void) {
   /* THaFppHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FppDictLN_THaFppHit));
   G__memfunc_setup("THaFppHit",840,G__FppDict_265_0_1, 105, G__get_linked_tagnum(&G__FppDictLN_THaFppHit), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '0' wire d - 'Double_t' 0 '0.' letdc "
"d - 'Double_t' 0 '0.' tetdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWire",695,G__FppDict_265_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLEtime",864,G__FppDict_265_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTEtime",872,G__FppDict_265_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStraw",817,G__FppDict_265_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWidth",800,G__FppDict_265_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDrftDist",1092,G__FppDict_265_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResidual",1113,G__FppDict_265_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWire",707,G__FppDict_265_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - wire", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLETime",844,G__FppDict_265_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ltdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTETime",852,G__FppDict_265_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ttdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStraw",829,G__FppDict_265_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - straw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWidth",812,G__FppDict_265_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDrftDist",1104,G__FppDict_265_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResidual",1125,G__FppDict_265_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - resid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("THaFppHit",840,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__FppDictLN_THaFppHit), -1, 0, 1, 1, 2, 0, "u 'THaFppHit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__FppDictLN_THaFppHit), -1, 1, 1, 1, 2, 0, "u 'THaFppHit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FppDict_265_0_18, 85, G__get_linked_tagnum(&G__FppDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&THaFppHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FppDict_265_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFppHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FppDict_265_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&THaFppHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FppDict_265_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&THaFppHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FppDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FppDict_265_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FppDict_265_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFppHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FppDict_265_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THaFppHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FppDict_265_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&THaFppHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FppDict_265_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&THaFppHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~THaFppHit", 966, G__FppDict_265_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncFppDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalFppDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcFppDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__FppDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__FppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__FppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__FppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__FppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaRunBase = { "THaRunBase" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaEvData = { "THaEvData" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaAnalysisObject = { "THaAnalysisObject" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaAnalysisObjectcLcLEStatus = { "THaAnalysisObject::EStatus" , 101 , -1 };
G__linked_taginfo G__FppDictLN_THaAnalysisObjectcLcLEMode = { "THaAnalysisObject::EMode" , 101 , -1 };
G__linked_taginfo G__FppDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__FppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaDetectorBase = { "THaDetectorBase" , 99 , -1 };
G__linked_taginfo G__FppDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__FppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaDetector = { "THaDetector" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaApparatus = { "THaApparatus" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaSpectrometerDetector = { "THaSpectrometerDetector" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaNonTrackingDetector = { "THaNonTrackingDetector" , 99 , -1 };
G__linked_taginfo G__FppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__FppDictLN_THaFppPlane = { "THaFppPlane" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaFpp = { "THaFpp" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaSubDetector = { "THaSubDetector" , 99 , -1 };
G__linked_taginfo G__FppDictLN_THaFppHit = { "THaFppHit" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableFppDict() {
  G__FppDictLN_TClass.tagnum = -1 ;
  G__FppDictLN_TBuffer.tagnum = -1 ;
  G__FppDictLN_TMemberInspector.tagnum = -1 ;
  G__FppDictLN_TObject.tagnum = -1 ;
  G__FppDictLN_TNamed.tagnum = -1 ;
  G__FppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__FppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FppDictLN_TClonesArray.tagnum = -1 ;
  G__FppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__FppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FppDictLN_THaRunBase.tagnum = -1 ;
  G__FppDictLN_TDatime.tagnum = -1 ;
  G__FppDictLN_THaEvData.tagnum = -1 ;
  G__FppDictLN_THaAnalysisObject.tagnum = -1 ;
  G__FppDictLN_THaAnalysisObjectcLcLEStatus.tagnum = -1 ;
  G__FppDictLN_THaAnalysisObjectcLcLEMode.tagnum = -1 ;
  G__FppDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__FppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__FppDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__FppDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__FppDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__FppDictLN_THaDetectorBase.tagnum = -1 ;
  G__FppDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__FppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FppDictLN_THaDetector.tagnum = -1 ;
  G__FppDictLN_THaApparatus.tagnum = -1 ;
  G__FppDictLN_THaSpectrometerDetector.tagnum = -1 ;
  G__FppDictLN_THaNonTrackingDetector.tagnum = -1 ;
  G__FppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__FppDictLN_THaFppPlane.tagnum = -1 ;
  G__FppDictLN_THaFpp.tagnum = -1 ;
  G__FppDictLN_THaSubDetector.tagnum = -1 ;
  G__FppDictLN_THaFppHit.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableFppDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__FppDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__FppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__FppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaRunBase);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TDatime);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaEvData);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaAnalysisObject);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaAnalysisObjectcLcLEStatus);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaAnalysisObjectcLcLEMode);
   G__get_linked_tagnum_fwd(&G__FppDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaDetectorBase);
   G__get_linked_tagnum_fwd(&G__FppDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaDetector);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaApparatus);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaSpectrometerDetector);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaNonTrackingDetector);
   G__get_linked_tagnum_fwd(&G__FppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FppDictLN_THaFppPlane),sizeof(THaFppPlane),-1,324864,"FppPlane class",G__setup_memvarTHaFppPlane,G__setup_memfuncTHaFppPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FppDictLN_THaFpp),sizeof(THaFpp),-1,324608,"Fpp class",G__setup_memvarTHaFpp,G__setup_memfuncTHaFpp);
   G__get_linked_tagnum_fwd(&G__FppDictLN_THaSubDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FppDictLN_THaFppHit),sizeof(THaFppHit),-1,294656,"FppHit class, number should be 1?",G__setup_memvarTHaFppHit,G__setup_memfuncTHaFppHit);
}
extern "C" void G__cpp_setupFppDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupFppDict()");
  G__set_cpp_environmentFppDict();
  G__cpp_setup_tagtableFppDict();

  G__cpp_setup_inheritanceFppDict();

  G__cpp_setup_typetableFppDict();

  G__cpp_setup_memvarFppDict();

  G__cpp_setup_memfuncFppDict();
  G__cpp_setup_globalFppDict();
  G__cpp_setup_funcFppDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncFppDict();
  return;
}
class G__cpp_setup_initFppDict {
  public:
    G__cpp_setup_initFppDict() { G__add_setup_func("FppDict",(G__incsetup)(&G__cpp_setupFppDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initFppDict() { G__remove_setup_func("FppDict"); }
};
G__cpp_setup_initFppDict G__cpp_setup_initializerFppDict;

