//
// File generated by /work/halla/gmp12/longwu/software/root/install/5.34.36/bin/rootcint at Sat Jan 21 13:26:33 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME GmpShowerDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GmpShowerDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void GmpShowerBlock_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GmpShowerBlock(void *p = 0);
   static void *newArray_GmpShowerBlock(Long_t size, void *p);
   static void delete_GmpShowerBlock(void *p);
   static void deleteArray_GmpShowerBlock(void *p);
   static void destruct_GmpShowerBlock(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GmpShowerBlock*)
   {
      ::GmpShowerBlock *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GmpShowerBlock >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GmpShowerBlock", ::GmpShowerBlock::Class_Version(), "./GmpShowerBlock.h", 13,
                  typeid(::GmpShowerBlock), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GmpShowerBlock::Dictionary, isa_proxy, 4,
                  sizeof(::GmpShowerBlock) );
      instance.SetNew(&new_GmpShowerBlock);
      instance.SetNewArray(&newArray_GmpShowerBlock);
      instance.SetDelete(&delete_GmpShowerBlock);
      instance.SetDeleteArray(&deleteArray_GmpShowerBlock);
      instance.SetDestructor(&destruct_GmpShowerBlock);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GmpShowerBlock*)
   {
      return GenerateInitInstanceLocal((::GmpShowerBlock*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GmpShowerBlock*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void GmpShowerCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GmpShowerCluster(void *p = 0);
   static void *newArray_GmpShowerCluster(Long_t size, void *p);
   static void delete_GmpShowerCluster(void *p);
   static void deleteArray_GmpShowerCluster(void *p);
   static void destruct_GmpShowerCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GmpShowerCluster*)
   {
      ::GmpShowerCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GmpShowerCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GmpShowerCluster", ::GmpShowerCluster::Class_Version(), "./GmpShowerCluster.h", 15,
                  typeid(::GmpShowerCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GmpShowerCluster::Dictionary, isa_proxy, 4,
                  sizeof(::GmpShowerCluster) );
      instance.SetNew(&new_GmpShowerCluster);
      instance.SetNewArray(&newArray_GmpShowerCluster);
      instance.SetDelete(&delete_GmpShowerCluster);
      instance.SetDeleteArray(&deleteArray_GmpShowerCluster);
      instance.SetDestructor(&destruct_GmpShowerCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GmpShowerCluster*)
   {
      return GenerateInitInstanceLocal((::GmpShowerCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GmpShowerCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void GmpShower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_GmpShower(void *p);
   static void deleteArray_GmpShower(void *p);
   static void destruct_GmpShower(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GmpShower*)
   {
      ::GmpShower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GmpShower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GmpShower", ::GmpShower::Class_Version(), "./GmpShower.h", 15,
                  typeid(::GmpShower), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GmpShower::Dictionary, isa_proxy, 4,
                  sizeof(::GmpShower) );
      instance.SetDelete(&delete_GmpShower);
      instance.SetDeleteArray(&deleteArray_GmpShower);
      instance.SetDestructor(&destruct_GmpShower);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GmpShower*)
   {
      return GenerateInitInstanceLocal((::GmpShower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GmpShower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr GmpShowerBlock::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GmpShowerBlock::Class_Name()
{
   return "GmpShowerBlock";
}

//______________________________________________________________________________
const char *GmpShowerBlock::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShowerBlock*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GmpShowerBlock::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShowerBlock*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GmpShowerBlock::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShowerBlock*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GmpShowerBlock::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShowerBlock*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr GmpShowerCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GmpShowerCluster::Class_Name()
{
   return "GmpShowerCluster";
}

//______________________________________________________________________________
const char *GmpShowerCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShowerCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GmpShowerCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShowerCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GmpShowerCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShowerCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GmpShowerCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShowerCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr GmpShower::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GmpShower::Class_Name()
{
   return "GmpShower";
}

//______________________________________________________________________________
const char *GmpShower::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GmpShower::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GmpShower::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GmpShower::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpShower*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void GmpShower::Streamer(TBuffer &R__b)
{
   // Stream an object of class GmpShower.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GmpShower::Class(),this);
   } else {
      R__b.WriteClassBuffer(GmpShower::Class(),this);
   }
}

//______________________________________________________________________________
void GmpShower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GmpShower.
      TClass *R__cl = ::GmpShower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlocks", &fBlocks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackProj", &fTrackProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlksptr", &fBlksptr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHitBlock", &fNHitBlock);
      THaShower::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_GmpShower(void *p) {
      delete ((::GmpShower*)p);
   }
   static void deleteArray_GmpShower(void *p) {
      delete [] ((::GmpShower*)p);
   }
   static void destruct_GmpShower(void *p) {
      typedef ::GmpShower current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GmpShower

//______________________________________________________________________________
void GmpShowerBlock::Streamer(TBuffer &R__b)
{
   // Stream an object of class GmpShowerBlock.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GmpShowerBlock::Class(),this);
   } else {
      R__b.WriteClassBuffer(GmpShowerBlock::Class(),this);
   }
}

//______________________________________________________________________________
void GmpShowerBlock::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GmpShowerBlock.
      TClass *R__cl = ::GmpShowerBlock::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXpos", &fXpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYpos", &fYpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRow", &fRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColumn", &fColumn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumber", &fNumber);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_GmpShowerBlock(void *p) {
      return  p ? new(p) ::GmpShowerBlock : new ::GmpShowerBlock;
   }
   static void *newArray_GmpShowerBlock(Long_t nElements, void *p) {
      return p ? new(p) ::GmpShowerBlock[nElements] : new ::GmpShowerBlock[nElements];
   }
   // Wrapper around operator delete
   static void delete_GmpShowerBlock(void *p) {
      delete ((::GmpShowerBlock*)p);
   }
   static void deleteArray_GmpShowerBlock(void *p) {
      delete [] ((::GmpShowerBlock*)p);
   }
   static void destruct_GmpShowerBlock(void *p) {
      typedef ::GmpShowerBlock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GmpShowerBlock

//______________________________________________________________________________
void GmpShowerCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class GmpShowerCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GmpShowerCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(GmpShowerCluster::Class(),this);
   }
}

//______________________________________________________________________________
void GmpShowerCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GmpShowerCluster.
      TClass *R__cl = ::GmpShowerCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlks", &fBlks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMainBlkNo", &fMainBlkNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCenterX", &fCenterX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCenterY", &fCenterY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fE", &fE);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_GmpShowerCluster(void *p) {
      return  p ? new(p) ::GmpShowerCluster : new ::GmpShowerCluster;
   }
   static void *newArray_GmpShowerCluster(Long_t nElements, void *p) {
      return p ? new(p) ::GmpShowerCluster[nElements] : new ::GmpShowerCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_GmpShowerCluster(void *p) {
      delete ((::GmpShowerCluster*)p);
   }
   static void deleteArray_GmpShowerCluster(void *p) {
      delete [] ((::GmpShowerCluster*)p);
   }
   static void destruct_GmpShowerCluster(void *p) {
      typedef ::GmpShowerCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GmpShowerCluster

/********************************************************
* GmpShowerDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGmpShowerDict();

extern "C" void G__set_cpp_environmentGmpShowerDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("GmpShowerBlock.h");
  G__add_compiledheader("GmpShowerCluster.h");
  G__add_compiledheader("GmpShower.h");
  G__cpp_reset_tagtableGmpShowerDict();
}
#include <new>
extern "C" int G__cpp_dllrevGmpShowerDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GmpShowerBlock */
static int G__GmpShowerDict_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpShowerBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpShowerBlock[n];
     } else {
       p = new((void*) gvp) GmpShowerBlock[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpShowerBlock;
     } else {
       p = new((void*) gvp) GmpShowerBlock;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpShowerBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GmpShowerBlock(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) GmpShowerBlock(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpShowerBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GmpShowerBlock(*(GmpShowerBlock*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) GmpShowerBlock(*(GmpShowerBlock*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpShowerBlock* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GmpShowerBlock((GmpShowerBlock*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) GmpShowerBlock((GmpShowerBlock*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const GmpShowerBlock& obj = ((GmpShowerBlock*) G__getstructoffset())->operator=(*(GmpShowerBlock*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpShowerBlock*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpShowerBlock*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpShowerBlock*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpShowerBlock*) G__getstructoffset())->GetRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpShowerBlock*) G__getstructoffset())->GetColumn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpShowerBlock*) G__getstructoffset())->GetNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpShowerBlock*) G__getstructoffset())->SetEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpShowerBlock*) G__getstructoffset())->SetX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpShowerBlock*) G__getstructoffset())->SetY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GmpShowerBlock::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShowerBlock::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GmpShowerBlock::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GmpShowerBlock::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpShowerBlock*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShowerBlock::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpShowerBlock::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShowerBlock::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_207_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpShowerBlock::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GmpShowerBlock G__TGmpShowerBlock;
static int G__GmpShowerDict_207_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GmpShowerBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GmpShowerBlock*) (soff+(sizeof(GmpShowerBlock)*i)))->~G__TGmpShowerBlock();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GmpShowerBlock*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GmpShowerBlock*) (soff))->~G__TGmpShowerBlock();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GmpShowerCluster */
static int G__GmpShowerDict_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpShowerCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpShowerCluster[n];
     } else {
       p = new((void*) gvp) GmpShowerCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpShowerCluster;
     } else {
       p = new((void*) gvp) GmpShowerCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpShowerCluster*) G__getstructoffset())->GetE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpShowerCluster*) G__getstructoffset())->GetCtrX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpShowerCluster*) G__getstructoffset())->GetCtrY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpShowerCluster*) G__getstructoffset())->GetMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpShowerCluster*) G__getstructoffset())->GetMainBlk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpShowerCluster*) G__getstructoffset())->GetBlocks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpShowerCluster*) G__getstructoffset())->AddBlock((GmpShowerBlock*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpShowerCluster*) G__getstructoffset())->CalcCluster();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GmpShowerCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShowerCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GmpShowerCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GmpShowerCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpShowerCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShowerCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpShowerCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShowerCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_216_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpShowerCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GmpShowerDict_216_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GmpShowerCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GmpShowerCluster(*(GmpShowerCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GmpShowerCluster G__TGmpShowerCluster;
static int G__GmpShowerDict_216_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GmpShowerCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GmpShowerCluster*) (soff+(sizeof(GmpShowerCluster)*i)))->~G__TGmpShowerCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GmpShowerCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GmpShowerCluster*) (soff))->~G__TGmpShowerCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GmpShowerDict_216_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpShowerCluster* dest = (GmpShowerCluster*) G__getstructoffset();
   *dest = *(GmpShowerCluster*) libp->para[0].ref;
   const GmpShowerCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GmpShower */
static int G__GmpShowerDict_270_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpShower* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) GmpShower(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpShower((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) GmpShower((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpShower((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) GmpShower((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpShower*) G__getstructoffset())->GetTrackHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpShower*) G__getstructoffset())->GetNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GmpShower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GmpShower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GmpShower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpShower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpShower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpShower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpShowerDict_270_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpShower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GmpShower G__TGmpShower;
static int G__GmpShowerDict_270_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GmpShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GmpShower*) (soff+(sizeof(GmpShower)*i)))->~G__TGmpShower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GmpShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GmpShower*) (soff))->~G__TGmpShower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GmpShowerBlock */

/* GmpShowerCluster */

/* GmpShower */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGmpShowerDict {
 public:
  G__Sizep2memfuncGmpShowerDict(): p(&G__Sizep2memfuncGmpShowerDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGmpShowerDict::*p)();
};

size_t G__get_sizep2memfuncGmpShowerDict()
{
  G__Sizep2memfuncGmpShowerDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGmpShowerDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock))) {
     GmpShowerBlock *G__Lderived;
     G__Lderived=(GmpShowerBlock*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock),G__get_linked_tagnum(&G__GmpShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster))) {
     GmpShowerCluster *G__Lderived;
     G__Lderived=(GmpShowerCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster),G__get_linked_tagnum(&G__GmpShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower))) {
     GmpShower *G__Lderived;
     G__Lderived=(GmpShower*)0x1000;
     {
       THaShower *G__Lpbase=(THaShower*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_THaShower),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaPidDetector *G__Lpbase=(THaPidDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_THaPidDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower),G__get_linked_tagnum(&G__GmpShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGmpShowerDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__GmpShowerDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GmpShowerBlock */
static void G__setup_memvarGmpShowerBlock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock));
   { GmpShowerBlock *p; p=(GmpShowerBlock*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,2,"kBig=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fYpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fColumn=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GmpShowerCluster */
static void G__setup_memvarGmpShowerCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster));
   { GmpShowerCluster *p; p=(GmpShowerCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,2,"kBig=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpShowerDictLN_TClonesArray),-1,-1,2,"fBlks=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMainBlkNo=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCenterX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCenterY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fE=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GmpShower */
static void G__setup_memvarGmpShower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower));
   { GmpShower *p; p=(GmpShower*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpShowerDictLN_TClonesArray),-1,-1,2,"fBlocks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpShowerDictLN_TClonesArray),-1,-1,2,"fClusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpShowerDictLN_TClonesArray),-1,-1,2,"fTrackProj=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock),-1,-1,2,"fBlksptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNHitBlock=",0,"Number of blocks in clusters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGmpShowerDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGmpShowerBlock(void) {
   /* GmpShowerBlock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock));
   G__memfunc_setup("GmpShowerBlock",1415,G__GmpShowerDict_207_0_1, 105, G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GmpShowerBlock",1415,G__GmpShowerDict_207_0_2, 105, G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock), -1, 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - column "
"i - 'Int_t' 0 - no", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GmpShowerBlock",1415,G__GmpShowerDict_207_0_3, 105, G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock), -1, 0, 1, 1, 1, 0, "u 'GmpShowerBlock' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GmpShowerBlock",1415,G__GmpShowerDict_207_0_4, 105, G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock), -1, 0, 1, 1, 1, 0, "U 'GmpShowerBlock' - 10 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__GmpShowerDict_207_0_5, 117, G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerBlock), -1, 1, 1, 1, 1, 0, "u 'GmpShowerBlock' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__GmpShowerDict_207_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__GmpShowerDict_207_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__GmpShowerDict_207_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__GmpShowerDict_207_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColumn",910,G__GmpShowerDict_207_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumber",905,G__GmpShowerDict_207_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergy",918,G__GmpShowerDict_207_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetX",388,G__GmpShowerDict_207_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__GmpShowerDict_207_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GmpShowerDict_207_0_17, 85, G__get_linked_tagnum(&G__GmpShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GmpShowerBlock::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GmpShowerDict_207_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShowerBlock::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GmpShowerDict_207_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GmpShowerBlock::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GmpShowerDict_207_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GmpShowerBlock::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GmpShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GmpShowerDict_207_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GmpShowerDict_207_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShowerBlock::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GmpShowerDict_207_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpShowerBlock::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GmpShowerDict_207_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShowerBlock::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GmpShowerDict_207_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpShowerBlock::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GmpShowerBlock", 1541, G__GmpShowerDict_207_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGmpShowerCluster(void) {
   /* GmpShowerCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster));
   G__memfunc_setup("GmpShowerCluster",1662,G__GmpShowerDict_216_0_1, 105, G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetE",357,G__GmpShowerDict_216_0_2, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCtrX",673,G__GmpShowerDict_216_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCtrY",674,G__GmpShowerDict_216_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMult",706,G__GmpShowerDict_216_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMainBlk",958,G__GmpShowerDict_216_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlocks",894,G__GmpShowerDict_216_0_7, 85, G__get_linked_tagnum(&G__GmpShowerDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddBlock",756,G__GmpShowerDict_216_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'GmpShowerBlock' - 10 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCluster",1109,G__GmpShowerDict_216_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetE",369,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCtrX",685,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCtrY",686,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GmpShowerDict_216_0_15, 85, G__get_linked_tagnum(&G__GmpShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GmpShowerCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GmpShowerDict_216_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShowerCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GmpShowerDict_216_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GmpShowerCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GmpShowerDict_216_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GmpShowerCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GmpShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GmpShowerDict_216_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GmpShowerDict_216_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShowerCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GmpShowerDict_216_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpShowerCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GmpShowerDict_216_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShowerCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GmpShowerDict_216_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpShowerCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GmpShowerCluster", 1662, G__GmpShowerDict_216_0_27, (int) ('i'), G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster), -1, 0, 1, 1, 1, 0, "u 'GmpShowerCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GmpShowerCluster", 1788, G__GmpShowerDict_216_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GmpShowerDict_216_0_29, (int) ('u'), G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShowerCluster), -1, 1, 1, 1, 1, 0, "u 'GmpShowerCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGmpShower(void) {
   /* GmpShower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower));
   G__memfunc_setup("GmpShower",924,G__GmpShowerDict_270_0_1, 105, G__get_linked_tagnum(&G__GmpShowerDictLN_GmpShower), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTrackHits",1197,G__GmpShowerDict_270_0_5, 85, G__get_linked_tagnum(&G__GmpShowerDictLN_TClonesArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTracks",982,G__GmpShowerDict_270_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearLastEvent",1405,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GmpShowerDict_270_0_10, 85, G__get_linked_tagnum(&G__GmpShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GmpShower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GmpShowerDict_270_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GmpShowerDict_270_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GmpShower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GmpShowerDict_270_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GmpShower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GmpShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GmpShowerDict_270_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GmpShowerDict_270_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GmpShowerDict_270_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpShower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GmpShowerDict_270_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpShower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GmpShowerDict_270_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpShower::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GmpShower", 1050, G__GmpShowerDict_270_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGmpShowerDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGmpShowerDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGmpShowerDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GmpShowerDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaEvData = { "THaEvData" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaAnalysisObject = { "THaAnalysisObject" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaAnalysisObjectcLcLEMode = { "THaAnalysisObject::EMode" , 101 , -1 };
G__linked_taginfo G__GmpShowerDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_GmpShowerBlock = { "GmpShowerBlock" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__GmpShowerDictLN_GmpShowerCluster = { "GmpShowerCluster" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaDetectorBase = { "THaDetectorBase" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaDetector = { "THaDetector" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaApparatus = { "THaApparatus" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaSpectrometerDetector = { "THaSpectrometerDetector" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaNonTrackingDetector = { "THaNonTrackingDetector" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaPidDetector = { "THaPidDetector" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_THaShower = { "THaShower" , 99 , -1 };
G__linked_taginfo G__GmpShowerDictLN_GmpShower = { "GmpShower" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGmpShowerDict() {
  G__GmpShowerDictLN_TClass.tagnum = -1 ;
  G__GmpShowerDictLN_TBuffer.tagnum = -1 ;
  G__GmpShowerDictLN_TMemberInspector.tagnum = -1 ;
  G__GmpShowerDictLN_TObject.tagnum = -1 ;
  G__GmpShowerDictLN_TNamed.tagnum = -1 ;
  G__GmpShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GmpShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpShowerDictLN_TClonesArray.tagnum = -1 ;
  G__GmpShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__GmpShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpShowerDictLN_TDatime.tagnum = -1 ;
  G__GmpShowerDictLN_THaEvData.tagnum = -1 ;
  G__GmpShowerDictLN_THaAnalysisObject.tagnum = -1 ;
  G__GmpShowerDictLN_THaAnalysisObjectcLcLEMode.tagnum = -1 ;
  G__GmpShowerDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__GmpShowerDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpShowerDictLN_GmpShowerBlock.tagnum = -1 ;
  G__GmpShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__GmpShowerDictLN_GmpShowerCluster.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__GmpShowerDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__GmpShowerDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__GmpShowerDictLN_THaDetectorBase.tagnum = -1 ;
  G__GmpShowerDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__GmpShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpShowerDictLN_THaDetector.tagnum = -1 ;
  G__GmpShowerDictLN_THaApparatus.tagnum = -1 ;
  G__GmpShowerDictLN_THaSpectrometerDetector.tagnum = -1 ;
  G__GmpShowerDictLN_THaNonTrackingDetector.tagnum = -1 ;
  G__GmpShowerDictLN_THaPidDetector.tagnum = -1 ;
  G__GmpShowerDictLN_THaShower.tagnum = -1 ;
  G__GmpShowerDictLN_GmpShower.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGmpShowerDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TDatime);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaEvData);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaAnalysisObject);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaAnalysisObjectcLcLEMode);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_GmpShowerBlock),sizeof(GmpShowerBlock),-1,327424,(char*)NULL,G__setup_memvarGmpShowerBlock,G__setup_memfuncGmpShowerBlock);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_GmpShowerCluster),sizeof(GmpShowerCluster),-1,292096,(char*)NULL,G__setup_memvarGmpShowerCluster,G__setup_memfuncGmpShowerCluster);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaDetectorBase);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaDetector);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaApparatus);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaSpectrometerDetector);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaNonTrackingDetector);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaPidDetector);
   G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_THaShower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GmpShowerDictLN_GmpShower),sizeof(GmpShower),-1,324608,"Generic shower detector class",G__setup_memvarGmpShower,G__setup_memfuncGmpShower);
}
extern "C" void G__cpp_setupGmpShowerDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGmpShowerDict()");
  G__set_cpp_environmentGmpShowerDict();
  G__cpp_setup_tagtableGmpShowerDict();

  G__cpp_setup_inheritanceGmpShowerDict();

  G__cpp_setup_typetableGmpShowerDict();

  G__cpp_setup_memvarGmpShowerDict();

  G__cpp_setup_memfuncGmpShowerDict();
  G__cpp_setup_globalGmpShowerDict();
  G__cpp_setup_funcGmpShowerDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGmpShowerDict();
  return;
}
class G__cpp_setup_initGmpShowerDict {
  public:
    G__cpp_setup_initGmpShowerDict() { G__add_setup_func("GmpShowerDict",(G__incsetup)(&G__cpp_setupGmpShowerDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGmpShowerDict() { G__remove_setup_func("GmpShowerDict"); }
};
G__cpp_setup_initGmpShowerDict G__cpp_setup_initializerGmpShowerDict;

