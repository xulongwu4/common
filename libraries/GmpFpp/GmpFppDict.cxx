//
// File generated by /work/halla/gmp12/longwu/software/root/install/5.34.36/bin/rootcint at Sat Jan 21 13:28:22 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME GmpFppDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GmpFppDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void GmpFppChamber_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GmpFppChamber(void *p = 0);
   static void *newArray_GmpFppChamber(Long_t size, void *p);
   static void delete_GmpFppChamber(void *p);
   static void deleteArray_GmpFppChamber(void *p);
   static void destruct_GmpFppChamber(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GmpFppChamber*)
   {
      ::GmpFppChamber *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GmpFppChamber >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GmpFppChamber", ::GmpFppChamber::Class_Version(), "./GmpFppChamber.h", 17,
                  typeid(::GmpFppChamber), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GmpFppChamber::Dictionary, isa_proxy, 4,
                  sizeof(::GmpFppChamber) );
      instance.SetNew(&new_GmpFppChamber);
      instance.SetNewArray(&newArray_GmpFppChamber);
      instance.SetDelete(&delete_GmpFppChamber);
      instance.SetDeleteArray(&deleteArray_GmpFppChamber);
      instance.SetDestructor(&destruct_GmpFppChamber);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GmpFppChamber*)
   {
      return GenerateInitInstanceLocal((::GmpFppChamber*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GmpFppChamber*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void GmpStrawChamber_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_GmpStrawChamber(void *p);
   static void deleteArray_GmpStrawChamber(void *p);
   static void destruct_GmpStrawChamber(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GmpStrawChamber*)
   {
      ::GmpStrawChamber *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GmpStrawChamber >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GmpStrawChamber", ::GmpStrawChamber::Class_Version(), "./GmpStrawChamber.h", 14,
                  typeid(::GmpStrawChamber), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GmpStrawChamber::Dictionary, isa_proxy, 4,
                  sizeof(::GmpStrawChamber) );
      instance.SetDelete(&delete_GmpStrawChamber);
      instance.SetDeleteArray(&deleteArray_GmpStrawChamber);
      instance.SetDestructor(&destruct_GmpStrawChamber);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GmpStrawChamber*)
   {
      return GenerateInitInstanceLocal((::GmpStrawChamber*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GmpStrawChamber*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void GmpFppPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GmpFppPlane(void *p = 0);
   static void *newArray_GmpFppPlane(Long_t size, void *p);
   static void delete_GmpFppPlane(void *p);
   static void deleteArray_GmpFppPlane(void *p);
   static void destruct_GmpFppPlane(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GmpFppPlane*)
   {
      ::GmpFppPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GmpFppPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GmpFppPlane", ::GmpFppPlane::Class_Version(), "./GmpFppPlane.h", 17,
                  typeid(::GmpFppPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GmpFppPlane::Dictionary, isa_proxy, 4,
                  sizeof(::GmpFppPlane) );
      instance.SetNew(&new_GmpFppPlane);
      instance.SetNewArray(&newArray_GmpFppPlane);
      instance.SetDelete(&delete_GmpFppPlane);
      instance.SetDeleteArray(&deleteArray_GmpFppPlane);
      instance.SetDestructor(&destruct_GmpFppPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GmpFppPlane*)
   {
      return GenerateInitInstanceLocal((::GmpFppPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GmpFppPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void GmpFppHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GmpFppHit(void *p = 0);
   static void *newArray_GmpFppHit(Long_t size, void *p);
   static void delete_GmpFppHit(void *p);
   static void deleteArray_GmpFppHit(void *p);
   static void destruct_GmpFppHit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GmpFppHit*)
   {
      ::GmpFppHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GmpFppHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GmpFppHit", ::GmpFppHit::Class_Version(), "./GmpFppHit.h", 14,
                  typeid(::GmpFppHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GmpFppHit::Dictionary, isa_proxy, 4,
                  sizeof(::GmpFppHit) );
      instance.SetNew(&new_GmpFppHit);
      instance.SetNewArray(&newArray_GmpFppHit);
      instance.SetDelete(&delete_GmpFppHit);
      instance.SetDeleteArray(&deleteArray_GmpFppHit);
      instance.SetDestructor(&destruct_GmpFppHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GmpFppHit*)
   {
      return GenerateInitInstanceLocal((::GmpFppHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GmpFppHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void GmpFppCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GmpFppCluster(void *p = 0);
   static void *newArray_GmpFppCluster(Long_t size, void *p);
   static void delete_GmpFppCluster(void *p);
   static void deleteArray_GmpFppCluster(void *p);
   static void destruct_GmpFppCluster(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GmpFppCluster*)
   {
      ::GmpFppCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GmpFppCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GmpFppCluster", ::GmpFppCluster::Class_Version(), "./GmpFppCluster.h", 21,
                  typeid(::GmpFppCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GmpFppCluster::Dictionary, isa_proxy, 4,
                  sizeof(::GmpFppCluster) );
      instance.SetNew(&new_GmpFppCluster);
      instance.SetNewArray(&newArray_GmpFppCluster);
      instance.SetDelete(&delete_GmpFppCluster);
      instance.SetDeleteArray(&deleteArray_GmpFppCluster);
      instance.SetDestructor(&destruct_GmpFppCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GmpFppCluster*)
   {
      return GenerateInitInstanceLocal((::GmpFppCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GmpFppCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr GmpFppChamber::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GmpFppChamber::Class_Name()
{
   return "GmpFppChamber";
}

//______________________________________________________________________________
const char *GmpFppChamber::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppChamber*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GmpFppChamber::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppChamber*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GmpFppChamber::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppChamber*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GmpFppChamber::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppChamber*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr GmpStrawChamber::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GmpStrawChamber::Class_Name()
{
   return "GmpStrawChamber";
}

//______________________________________________________________________________
const char *GmpStrawChamber::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpStrawChamber*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GmpStrawChamber::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpStrawChamber*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GmpStrawChamber::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpStrawChamber*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GmpStrawChamber::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpStrawChamber*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr GmpFppPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GmpFppPlane::Class_Name()
{
   return "GmpFppPlane";
}

//______________________________________________________________________________
const char *GmpFppPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GmpFppPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GmpFppPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GmpFppPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr GmpFppHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GmpFppHit::Class_Name()
{
   return "GmpFppHit";
}

//______________________________________________________________________________
const char *GmpFppHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GmpFppHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GmpFppHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GmpFppHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr GmpFppCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GmpFppCluster::Class_Name()
{
   return "GmpFppCluster";
}

//______________________________________________________________________________
const char *GmpFppCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GmpFppCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GmpFppCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GmpFppCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GmpFppCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void GmpStrawChamber::Streamer(TBuffer &R__b)
{
   // Stream an object of class GmpStrawChamber.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GmpStrawChamber::Class(),this);
   } else {
      R__b.WriteClassBuffer(GmpStrawChamber::Class(),this);
   }
}

//______________________________________________________________________________
void GmpStrawChamber::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GmpStrawChamber.
      TClass *R__cl = ::GmpStrawChamber::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fV", &fV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fU", &fU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngle", &fAngle);
      THaNonTrackingDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_GmpStrawChamber(void *p) {
      delete ((::GmpStrawChamber*)p);
   }
   static void deleteArray_GmpStrawChamber(void *p) {
      delete [] ((::GmpStrawChamber*)p);
   }
   static void destruct_GmpStrawChamber(void *p) {
      typedef ::GmpStrawChamber current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GmpStrawChamber

//______________________________________________________________________________
void GmpFppPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class GmpFppPlane.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GmpFppPlane::Class(),this);
   } else {
      R__b.WriteClassBuffer(GmpFppPlane::Class(),this);
   }
}

//______________________________________________________________________________
void GmpFppPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GmpFppPlane.
      TClass *R__cl = ::GmpFppPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGHits", &fGHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZZ", &fZZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWAngle", &fWAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWspacing", &fWspacing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUVzero", &fUVzero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStrawd", &fStrawd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSinAngle", &fSinAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCosAngle", &fCosAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNWireGroups", &fNWireGroups);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDemuxCut", (void*)&fDemuxCut);
      R__insp.InspectMember("vector<std::vector<Double_t> >", (void*)&fDemuxCut, "fDemuxCut.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrftDstPara", (void*)&fDrftDstPara);
      R__insp.InspectMember("vector<Double_t>", (void*)&fDrftDstPara, "fDrftDstPara.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTOff", (void*)&fTOff);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTOff, "fTOff.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTAdd", (void*)&fTAdd);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTAdd, "fTAdd.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXax", &fXax);
      R__insp.InspectMember(fXax, "fXax.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYax", &fYax);
      R__insp.InspectMember(fYax, "fYax.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZax", &fZax);
      R__insp.InspectMember(fZax, "fZax.");
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_GmpFppPlane(void *p) {
      return  p ? new(p) ::GmpFppPlane : new ::GmpFppPlane;
   }
   static void *newArray_GmpFppPlane(Long_t nElements, void *p) {
      return p ? new(p) ::GmpFppPlane[nElements] : new ::GmpFppPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_GmpFppPlane(void *p) {
      delete ((::GmpFppPlane*)p);
   }
   static void deleteArray_GmpFppPlane(void *p) {
      delete [] ((::GmpFppPlane*)p);
   }
   static void destruct_GmpFppPlane(void *p) {
      typedef ::GmpFppPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GmpFppPlane

//______________________________________________________________________________
void GmpFppChamber::Streamer(TBuffer &R__b)
{
   // Stream an object of class GmpFppChamber.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GmpFppChamber::Class(),this);
   } else {
      R__b.WriteClassBuffer(GmpFppChamber::Class(),this);
   }
}

//______________________________________________________________________________
void GmpFppChamber::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GmpFppChamber.
      TClass *R__cl = ::GmpFppChamber::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBottom", &fBottom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMiddle", &fMiddle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTop", &fTop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusters", &fClusters);
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_GmpFppChamber(void *p) {
      return  p ? new(p) ::GmpFppChamber : new ::GmpFppChamber;
   }
   static void *newArray_GmpFppChamber(Long_t nElements, void *p) {
      return p ? new(p) ::GmpFppChamber[nElements] : new ::GmpFppChamber[nElements];
   }
   // Wrapper around operator delete
   static void delete_GmpFppChamber(void *p) {
      delete ((::GmpFppChamber*)p);
   }
   static void deleteArray_GmpFppChamber(void *p) {
      delete [] ((::GmpFppChamber*)p);
   }
   static void destruct_GmpFppChamber(void *p) {
      typedef ::GmpFppChamber current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GmpFppChamber

//______________________________________________________________________________
void GmpFppHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class GmpFppHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GmpFppHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(GmpFppHit::Class(),this);
   }
}

//______________________________________________________________________________
void GmpFppHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GmpFppHit.
      TClass *R__cl = ::GmpFppHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWire", &fWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLtdc", &fLtdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTtdc", &fTtdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStraw", &fStraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth", &fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrftTime", &fDrftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrftDist", &fDrftDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPlane", &fPlane);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_GmpFppHit(void *p) {
      return  p ? new(p) ::GmpFppHit : new ::GmpFppHit;
   }
   static void *newArray_GmpFppHit(Long_t nElements, void *p) {
      return p ? new(p) ::GmpFppHit[nElements] : new ::GmpFppHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_GmpFppHit(void *p) {
      delete ((::GmpFppHit*)p);
   }
   static void deleteArray_GmpFppHit(void *p) {
      delete [] ((::GmpFppHit*)p);
   }
   static void destruct_GmpFppHit(void *p) {
      typedef ::GmpFppHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GmpFppHit

//______________________________________________________________________________
void GmpFppCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class GmpFppCluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GmpFppCluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(GmpFppCluster::Class(),this);
   }
}

//______________________________________________________________________________
void GmpFppCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GmpFppCluster.
      TClass *R__cl = ::GmpFppCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHits", (void*)&fHits);
      R__insp.InspectMember("vector<GmpFppHit*>", (void*)&fHits, "fHits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChamber", &fChamber);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_GmpFppCluster(void *p) {
      return  p ? new(p) ::GmpFppCluster : new ::GmpFppCluster;
   }
   static void *newArray_GmpFppCluster(Long_t nElements, void *p) {
      return p ? new(p) ::GmpFppCluster[nElements] : new ::GmpFppCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_GmpFppCluster(void *p) {
      delete ((::GmpFppCluster*)p);
   }
   static void deleteArray_GmpFppCluster(void *p) {
      delete [] ((::GmpFppCluster*)p);
   }
   static void destruct_GmpFppCluster(void *p) {
      typedef ::GmpFppCluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GmpFppCluster

/********************************************************
* GmpFppDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGmpFppDict();

extern "C" void G__set_cpp_environmentGmpFppDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("GmpStrawChamber.h");
  G__add_compiledheader("GmpFppChamber.h");
  G__add_compiledheader("GmpFppPlane.h");
  G__add_compiledheader("GmpFppCluster.h");
  G__add_compiledheader("GmpFppHit.h");
  G__cpp_reset_tagtableGmpFppDict();
}
#include <new>
extern "C" int G__cpp_dllrevGmpFppDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GmpFppChamber */
static int G__GmpFppDict_258_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpFppChamber* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppChamber(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) GmpFppChamber(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppChamber((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) GmpFppChamber((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppChamber((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) GmpFppChamber((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new GmpFppChamber[n];
       } else {
         p = new((void*) gvp) GmpFppChamber[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new GmpFppChamber;
       } else {
         p = new((void*) gvp) GmpFppChamber;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((GmpFppChamber*) G__getstructoffset())->Clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((GmpFppChamber*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GmpFppChamber*) G__getstructoffset())->Process());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppChamber*) G__getstructoffset())->GetBotPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppChamber*) G__getstructoffset())->GetMidPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppChamber*) G__getstructoffset())->GetTopPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpFppChamber*) G__getstructoffset())->GetNClusts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppChamber*) G__getstructoffset())->GetClusts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppChamber*) G__getstructoffset())->GetClust((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GmpFppChamber::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppChamber::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GmpFppChamber::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GmpFppChamber::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppChamber*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppChamber::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpFppChamber::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppChamber::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_258_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpFppChamber::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GmpFppChamber G__TGmpFppChamber;
static int G__GmpFppDict_258_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GmpFppChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GmpFppChamber*) (soff+(sizeof(GmpFppChamber)*i)))->~G__TGmpFppChamber();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GmpFppChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GmpFppChamber*) (soff))->~G__TGmpFppChamber();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GmpStrawChamber */
static int G__GmpFppDict_259_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpStrawChamber* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpStrawChamber(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) GmpStrawChamber(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpStrawChamber((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) GmpStrawChamber((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpStrawChamber((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) GmpStrawChamber((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((GmpStrawChamber*) G__getstructoffset())->Clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((GmpStrawChamber*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpStrawChamber*) G__getstructoffset())->GetVChamber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpStrawChamber*) G__getstructoffset())->GetUChamber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpStrawChamber*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpStrawChamber*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpStrawChamber*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpStrawChamber*) G__getstructoffset())->GetAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GmpStrawChamber::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpStrawChamber::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GmpStrawChamber::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GmpStrawChamber::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpStrawChamber*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpStrawChamber::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpStrawChamber::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpStrawChamber::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_259_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpStrawChamber::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GmpStrawChamber G__TGmpStrawChamber;
static int G__GmpFppDict_259_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GmpStrawChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GmpStrawChamber*) (soff+(sizeof(GmpStrawChamber)*i)))->~G__TGmpStrawChamber();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GmpStrawChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GmpStrawChamber*) (soff))->~G__TGmpStrawChamber();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GmpFppPlane */
static int G__GmpFppDict_261_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpFppPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppPlane(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) GmpFppPlane(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppPlane((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) GmpFppPlane((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppPlane((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) GmpFppPlane((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new GmpFppPlane[n];
       } else {
         p = new((void*) gvp) GmpFppPlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new GmpFppPlane;
       } else {
         p = new((void*) gvp) GmpFppPlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((GmpFppPlane*) G__getstructoffset())->Clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((GmpFppPlane*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((GmpFppPlane*) G__getstructoffset())->ProcessHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpFppPlane*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppPlane*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppPlane*) G__getstructoffset())->GetHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpFppPlane*) G__getstructoffset())->GetNGHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppPlane*) G__getstructoffset())->GetGHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppPlane*) G__getstructoffset())->GetGHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetZZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpFppPlane*) G__getstructoffset())->GetNStraws());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetWAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetWSpac());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetUV0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetStrawd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetSinAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppPlane*) G__getstructoffset())->GetCosAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpFppPlane*) G__getstructoffset())->GetNWireGroups());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const GmpFppPlane*) G__getstructoffset())->GetXax();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const GmpFppPlane*) G__getstructoffset())->GetYax();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const GmpFppPlane*) G__getstructoffset())->GetZax();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GmpFppPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GmpFppPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GmpFppPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpFppPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_261_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpFppPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GmpFppPlane G__TGmpFppPlane;
static int G__GmpFppDict_261_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GmpFppPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GmpFppPlane*) (soff+(sizeof(GmpFppPlane)*i)))->~G__TGmpFppPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GmpFppPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GmpFppPlane*) (soff))->~G__TGmpFppPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GmpFppHit */
static int G__GmpFppDict_262_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpFppHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppHit(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (GmpFppPlane*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) GmpFppHit(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (GmpFppPlane*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppHit(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) GmpFppHit(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppHit((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) GmpFppHit((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppHit((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) GmpFppHit((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new GmpFppHit[n];
       } else {
         p = new((void*) gvp) GmpFppHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new GmpFppHit;
       } else {
         p = new((void*) gvp) GmpFppHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpFppHit*) G__getstructoffset())->GetWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppHit*) G__getstructoffset())->GetLEtime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppHit*) G__getstructoffset())->GetTEtime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppHit*) G__getstructoffset())->GetStraw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppHit*) G__getstructoffset())->GetWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppHit*) G__getstructoffset())->GetDrftTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const GmpFppHit*) G__getstructoffset())->GetDrftDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppHit*) G__getstructoffset())->SetWire((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppHit*) G__getstructoffset())->SetLEtime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppHit*) G__getstructoffset())->SetTEtime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppHit*) G__getstructoffset())->SetStraw((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppHit*) G__getstructoffset())->SetWidth((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppHit*) G__getstructoffset())->SetDrftTime((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppHit*) G__getstructoffset())->SetDrftDist((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GmpFppHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GmpFppHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GmpFppHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpFppHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_262_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpFppHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GmpFppHit G__TGmpFppHit;
static int G__GmpFppDict_262_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GmpFppHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GmpFppHit*) (soff+(sizeof(GmpFppHit)*i)))->~G__TGmpFppHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GmpFppHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GmpFppHit*) (soff))->~G__TGmpFppHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GmpFppCluster */
static int G__GmpFppDict_280_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpFppCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GmpFppCluster((GmpFppChamber*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) GmpFppCluster((GmpFppChamber*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new GmpFppCluster[n];
       } else {
         p = new((void*) gvp) GmpFppCluster[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new GmpFppCluster;
       } else {
         p = new((void*) gvp) GmpFppCluster;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppCluster*) G__getstructoffset())->AddHit((GmpFppHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppCluster*) G__getstructoffset())->GetHit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const GmpFppCluster*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const GmpFppCluster*) G__getstructoffset())->GetChamber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppCluster*) G__getstructoffset())->SetChamber((GmpFppChamber*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GmpFppCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GmpFppCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GmpFppCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GmpFppCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpFppCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GmpFppCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GmpFppDict_280_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GmpFppCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GmpFppDict_280_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GmpFppCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GmpFppCluster(*(GmpFppCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GmpFppCluster G__TGmpFppCluster;
static int G__GmpFppDict_280_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GmpFppCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GmpFppCluster*) (soff+(sizeof(GmpFppCluster)*i)))->~G__TGmpFppCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GmpFppCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GmpFppCluster*) (soff))->~G__TGmpFppCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GmpFppDict_280_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GmpFppCluster* dest = (GmpFppCluster*) G__getstructoffset();
   *dest = *(GmpFppCluster*) libp->para[0].ref;
   const GmpFppCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GmpFppChamber */

/* GmpStrawChamber */

/* GmpFppPlane */

/* GmpFppHit */

/* GmpFppCluster */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGmpFppDict {
 public:
  G__Sizep2memfuncGmpFppDict(): p(&G__Sizep2memfuncGmpFppDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGmpFppDict::*p)();
};

size_t G__get_sizep2memfuncGmpFppDict()
{
  G__Sizep2memfuncGmpFppDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGmpFppDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber))) {
     GmpFppChamber *G__Lderived;
     G__Lderived=(GmpFppChamber*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber),G__get_linked_tagnum(&G__GmpFppDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber),G__get_linked_tagnum(&G__GmpFppDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber),G__get_linked_tagnum(&G__GmpFppDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber),G__get_linked_tagnum(&G__GmpFppDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber),G__get_linked_tagnum(&G__GmpFppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber))) {
     GmpStrawChamber *G__Lderived;
     G__Lderived=(GmpStrawChamber*)0x1000;
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber),G__get_linked_tagnum(&G__GmpFppDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber),G__get_linked_tagnum(&G__GmpFppDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber),G__get_linked_tagnum(&G__GmpFppDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber),G__get_linked_tagnum(&G__GmpFppDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber),G__get_linked_tagnum(&G__GmpFppDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber),G__get_linked_tagnum(&G__GmpFppDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber),G__get_linked_tagnum(&G__GmpFppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpFppDictLN_THaSubDetector))) {
     THaSubDetector *G__Lderived;
     G__Lderived=(THaSubDetector*)0x1000;
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_THaSubDetector),G__get_linked_tagnum(&G__GmpFppDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_THaSubDetector),G__get_linked_tagnum(&G__GmpFppDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_THaSubDetector),G__get_linked_tagnum(&G__GmpFppDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_THaSubDetector),G__get_linked_tagnum(&G__GmpFppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane))) {
     GmpFppPlane *G__Lderived;
     G__Lderived=(GmpFppPlane*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),G__get_linked_tagnum(&G__GmpFppDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),G__get_linked_tagnum(&G__GmpFppDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),G__get_linked_tagnum(&G__GmpFppDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),G__get_linked_tagnum(&G__GmpFppDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),G__get_linked_tagnum(&G__GmpFppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit))) {
     GmpFppHit *G__Lderived;
     G__Lderived=(GmpFppHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit),G__get_linked_tagnum(&G__GmpFppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster))) {
     GmpFppCluster *G__Lderived;
     G__Lderived=(GmpFppCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster),G__get_linked_tagnum(&G__GmpFppDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGmpFppDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GmpFppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GmpFppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__GmpFppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__GmpFppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__GmpFppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<Double_t> >",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Double_t> >",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<GmpFppHit*>",117,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GmpFppDictLN_reverse_iteratorlEvectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GmpFppChamber */
static void G__setup_memvarGmpFppChamber(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber));
   { GmpFppChamber *p; p=(GmpFppChamber*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),-1,-1,2,"fBottom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),-1,-1,2,"fMiddle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),-1,-1,2,"fTop=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TClonesArray),-1,-1,2,"fClusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GmpStrawChamber */
static void G__setup_memvarGmpStrawChamber(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber));
   { GmpStrawChamber *p; p=(GmpStrawChamber*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber),-1,-1,2,"fV=",0,"V chamber");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber),-1,-1,2,"fU=",0,"U chamber");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAngle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GmpFppPlane */
static void G__setup_memvarGmpFppPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane));
   { GmpFppPlane *p; p=(GmpFppPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"fMaxHit=35LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"fNStrawsPerGroup=8LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"fDemuxOrder[8]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,2,"fTDCRes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TClonesArray),-1,-1,2,"fHits=",0,"Hits ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TClonesArray),-1,-1,2,"fGHits=",0,"Good hits ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWAngle=",0,"Wire angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWspacing=",0,"Wire spacing");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUVzero=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStrawd=",0,"straw diameter");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSinAngle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCosAngle=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNWireGroups=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<Double_t> >"),-1,2,"fDemuxCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,2,"fDrftDstPara=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,2,"fTOff=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,2,"fTAdd=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TVector3),-1,-1,2,"fXax=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TVector3),-1,-1,2,"fYax=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TVector3),-1,-1,2,"fZax=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlanecLcLETDCPairStatus),-1,-2,2,"kPairNOTFound=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlanecLcLETDCPairStatus),-1,-2,2,"kPairFound=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GmpFppHit */
static void G__setup_memvarGmpFppHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit));
   { GmpFppHit *p; p=(GmpFppHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fWire=",0,"Wire group number");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLtdc=",0,"Leading TDC value  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTtdc=",0,"Trailing TDC value ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStraw=",0,"Straw number, after demultiplexing");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDrftTime=",0,"Drift time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDrftDist=",0,"Drift distance to wire");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane),-1,-1,2,"fPlane=",0,"To which plane this hit belongs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GmpFppCluster */
static void G__setup_memvarGmpFppCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster));
   { GmpFppCluster *p; p=(GmpFppCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_vectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgR),G__defined_typename("vector<GmpFppHit*>"),-1,2,"fHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber),-1,-1,2,"fChamber=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GmpFppDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGmpFppDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGmpFppChamber(void) {
   /* GmpFppChamber */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber));
   G__memfunc_setup("GmpFppChamber",1276,G__GmpFppDict_258_0_1, 105, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' description "
"U 'THaDetectorBase' - 0 'NULL' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__GmpFppDict_258_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", "Reset event-by-event data", (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - evData", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__GmpFppDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,G__GmpFppDict_258_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBotPlane",1077,G__GmpFppDict_258_0_6, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMidPlane",1066,G__GmpFppDict_258_0_7, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTopPlane",1091,G__GmpFppDict_258_0_8, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNClusts",1004,G__GmpFppDict_258_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClusts",926,G__GmpFppDict_258_0_10, 85, G__get_linked_tagnum(&G__GmpFppDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetClust",811,G__GmpFppDict_258_0_11, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProcessHits",1143,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindClusters",1238,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GmpFppDict_258_0_15, 85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GmpFppChamber::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GmpFppDict_258_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppChamber::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GmpFppDict_258_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GmpFppChamber::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GmpFppDict_258_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GmpFppChamber::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GmpFppDict_258_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GmpFppDict_258_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppChamber::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GmpFppDict_258_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpFppChamber::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GmpFppDict_258_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppChamber::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GmpFppDict_258_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpFppChamber::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GmpFppChamber", 1402, G__GmpFppDict_258_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGmpStrawChamber(void) {
   /* GmpStrawChamber */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber));
   G__memfunc_setup("GmpStrawChamber",1511,G__GmpFppDict_259_0_1, 105, G__get_linked_tagnum(&G__GmpFppDictLN_GmpStrawChamber), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__GmpFppDict_259_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__GmpFppDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVChamber",1064,G__GmpFppDict_259_0_7, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUChamber",1063,G__GmpFppDict_259_0_8, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__GmpFppDict_259_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__GmpFppDict_259_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__GmpFppDict_259_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngle",775,G__GmpFppDict_259_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GmpFppDict_259_0_14, 85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GmpStrawChamber::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GmpFppDict_259_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpStrawChamber::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GmpFppDict_259_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GmpStrawChamber::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GmpFppDict_259_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GmpStrawChamber::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GmpFppDict_259_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GmpFppDict_259_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpStrawChamber::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GmpFppDict_259_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpStrawChamber::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GmpFppDict_259_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpStrawChamber::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GmpFppDict_259_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpStrawChamber::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GmpStrawChamber", 1637, G__GmpFppDict_259_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGmpFppPlane(void) {
   /* GmpFppPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane));
   G__memfunc_setup("GmpFppPlane",1082,G__GmpFppDict_261_0_1, 105, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppPlane), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' description "
"U 'THaDetectorBase' - 0 'NULL' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__GmpFppDict_261_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", "Raw data -> hits", (void*) NULL, 1);
   G__memfunc_setup("ProcessHits",1143,G__GmpFppDict_261_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNHits",774,G__GmpFppDict_261_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__GmpFppDict_261_0_6, 85, G__get_linked_tagnum(&G__GmpFppDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__GmpFppDict_261_0_7, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNGHits",845,G__GmpFppDict_261_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGHits",767,G__GmpFppDict_261_0_9, 85, G__get_linked_tagnum(&G__GmpFppDictLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGHit",652,G__GmpFppDict_261_0_10, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__GmpFppDict_261_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__GmpFppDict_261_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__GmpFppDict_261_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZZ",468,G__GmpFppDict_261_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNStraws",1010,G__GmpFppDict_261_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "Number of straws in plane", (void*) NULL, 0);
   G__memfunc_setup("GetWAngle",862,G__GmpFppDict_261_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Wire angle", (void*) NULL, 0);
   G__memfunc_setup("GetWSpac",766,G__GmpFppDict_261_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "Wire spacing", (void*) NULL, 0);
   G__memfunc_setup("GetUV0",507,G__GmpFppDict_261_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStrawd",917,G__GmpFppDict_261_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "straw diameter", (void*) NULL, 0);
   G__memfunc_setup("GetSinAngle",1073,G__GmpFppDict_261_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosAngle",1068,G__GmpFppDict_261_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNWireGroups",1413,G__GmpFppDict_261_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXax",593,G__GmpFppDict_261_0_23, 117, G__get_linked_tagnum(&G__GmpFppDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYax",594,G__GmpFppDict_261_0_24, 117, G__get_linked_tagnum(&G__GmpFppDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZax",595,G__GmpFppDict_261_0_25, 117, G__get_linked_tagnum(&G__GmpFppDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineAxes",988,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - rotation_angle", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakePrefix",1004,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GmpFppDict_261_0_30, 85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GmpFppPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GmpFppDict_261_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GmpFppDict_261_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GmpFppPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GmpFppDict_261_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GmpFppPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GmpFppDict_261_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GmpFppDict_261_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GmpFppDict_261_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpFppPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GmpFppDict_261_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GmpFppDict_261_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpFppPlane::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GmpFppPlane", 1208, G__GmpFppDict_261_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGmpFppHit(void) {
   /* GmpFppHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit));
   G__memfunc_setup("GmpFppHit",879,G__GmpFppDict_262_0_1, 105, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 '0' wire d - 'Double_t' 0 '0.' letdc "
"d - 'Double_t' 0 '0.' tetdc U 'GmpFppPlane' - 0 'NULL' plane", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWire",695,G__GmpFppDict_262_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLEtime",864,G__GmpFppDict_262_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTEtime",872,G__GmpFppDict_262_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStraw",817,G__GmpFppDict_262_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWidth",800,G__GmpFppDict_262_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDrftTime",1087,G__GmpFppDict_262_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDrftDist",1092,G__GmpFppDict_262_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWire",707,G__GmpFppDict_262_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - wire", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLEtime",876,G__GmpFppDict_262_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ltdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTEtime",884,G__GmpFppDict_262_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ttdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStraw",829,G__GmpFppDict_262_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - straw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWidth",812,G__GmpFppDict_262_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDrftTime",1099,G__GmpFppDict_262_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDrftDist",1104,G__GmpFppDict_262_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GmpFppHit",879,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit), -1, 0, 1, 1, 4, 0, "u 'GmpFppHit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit), -1, 1, 1, 1, 4, 0, "u 'GmpFppHit' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GmpFppDict_262_0_18, 85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GmpFppHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GmpFppDict_262_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GmpFppDict_262_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GmpFppHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GmpFppDict_262_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GmpFppHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GmpFppDict_262_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GmpFppDict_262_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GmpFppDict_262_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpFppHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GmpFppDict_262_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GmpFppDict_262_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpFppHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GmpFppHit", 1005, G__GmpFppDict_262_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGmpFppCluster(void) {
   /* GmpFppCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster));
   G__memfunc_setup("GmpFppCluster",1324,G__GmpFppDict_280_0_1, 105, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster), -1, 0, 1, 1, 1, 0, "U 'GmpFppChamber' - 0 '0' owner", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHit",558,G__GmpFppDict_280_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'GmpFppHit' - 0 - hit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHit",581,G__GmpFppDict_280_0_4, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppHit), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__GmpFppDict_280_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChamber",978,G__GmpFppDict_280_0_6, 85, G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppChamber), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChamber",990,G__GmpFppDict_280_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'GmpFppChamber' - 0 - chamber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GmpFppDict_280_0_8, 85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GmpFppCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GmpFppDict_280_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GmpFppDict_280_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GmpFppCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GmpFppDict_280_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GmpFppCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GmpFppDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GmpFppDict_280_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GmpFppDict_280_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GmpFppDict_280_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpFppCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GmpFppDict_280_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GmpFppCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GmpFppDict_280_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GmpFppCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GmpFppCluster", 1324, G__GmpFppDict_280_0_20, (int) ('i'), G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster), -1, 0, 1, 1, 1, 0, "u 'GmpFppCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GmpFppCluster", 1450, G__GmpFppDict_280_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GmpFppDict_280_0_22, (int) ('u'), G__get_linked_tagnum(&G__GmpFppDictLN_GmpFppCluster), -1, 1, 1, 1, 1, 0, "u 'GmpFppCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGmpFppDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGmpFppDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGmpFppDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GmpFppDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaEvData = { "THaEvData" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaAnalysisObject = { "THaAnalysisObject" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaAnalysisObjectcLcLEStatus = { "THaAnalysisObject::EStatus" , 101 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaAnalysisObjectcLcLEMode = { "THaAnalysisObject::EMode" , 101 , -1 };
G__linked_taginfo G__GmpFppDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaDetectorBase = { "THaDetectorBase" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaDetector = { "THaDetector" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaApparatus = { "THaApparatus" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaSpectrometerDetector = { "THaSpectrometerDetector" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaNonTrackingDetector = { "THaNonTrackingDetector" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_GmpFppChamber = { "GmpFppChamber" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_GmpStrawChamber = { "GmpStrawChamber" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_THaSubDetector = { "THaSubDetector" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_GmpFppPlane = { "GmpFppPlane" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_GmpFppHit = { "GmpFppHit" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_GmpFppPlanecLcLETDCPairStatus = { "GmpFppPlane::ETDCPairStatus" , 101 , -1 };
G__linked_taginfo G__GmpFppDictLN_GmpFppCluster = { "GmpFppCluster" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_vectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgR = { "vector<GmpFppHit*,allocator<GmpFppHit*> >" , 99 , -1 };
G__linked_taginfo G__GmpFppDictLN_reverse_iteratorlEvectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<GmpFppHit*,allocator<GmpFppHit*> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGmpFppDict() {
  G__GmpFppDictLN_TClass.tagnum = -1 ;
  G__GmpFppDictLN_TBuffer.tagnum = -1 ;
  G__GmpFppDictLN_TMemberInspector.tagnum = -1 ;
  G__GmpFppDictLN_TObject.tagnum = -1 ;
  G__GmpFppDictLN_TNamed.tagnum = -1 ;
  G__GmpFppDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__GmpFppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GmpFppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpFppDictLN_TClonesArray.tagnum = -1 ;
  G__GmpFppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__GmpFppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpFppDictLN_TDatime.tagnum = -1 ;
  G__GmpFppDictLN_THaEvData.tagnum = -1 ;
  G__GmpFppDictLN_TVector3.tagnum = -1 ;
  G__GmpFppDictLN_THaAnalysisObject.tagnum = -1 ;
  G__GmpFppDictLN_THaAnalysisObjectcLcLEStatus.tagnum = -1 ;
  G__GmpFppDictLN_THaAnalysisObjectcLcLEMode.tagnum = -1 ;
  G__GmpFppDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__GmpFppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__GmpFppDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__GmpFppDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__GmpFppDictLN_THaDetectorBase.tagnum = -1 ;
  G__GmpFppDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__GmpFppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpFppDictLN_THaDetector.tagnum = -1 ;
  G__GmpFppDictLN_THaApparatus.tagnum = -1 ;
  G__GmpFppDictLN_THaSpectrometerDetector.tagnum = -1 ;
  G__GmpFppDictLN_THaNonTrackingDetector.tagnum = -1 ;
  G__GmpFppDictLN_GmpFppChamber.tagnum = -1 ;
  G__GmpFppDictLN_GmpStrawChamber.tagnum = -1 ;
  G__GmpFppDictLN_THaSubDetector.tagnum = -1 ;
  G__GmpFppDictLN_GmpFppPlane.tagnum = -1 ;
  G__GmpFppDictLN_GmpFppHit.tagnum = -1 ;
  G__GmpFppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__GmpFppDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GmpFppDictLN_GmpFppPlanecLcLETDCPairStatus.tagnum = -1 ;
  G__GmpFppDictLN_GmpFppCluster.tagnum = -1 ;
  G__GmpFppDictLN_vectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgR.tagnum = -1 ;
  G__GmpFppDictLN_reverse_iteratorlEvectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGmpFppDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TDatime);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaEvData);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaAnalysisObject);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaAnalysisObjectcLcLEStatus);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaAnalysisObjectcLcLEMode);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaDetectorBase);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaDetector);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaApparatus);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaSpectrometerDetector);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaNonTrackingDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GmpFppDictLN_GmpFppChamber),sizeof(GmpFppChamber),-1,324864,(char*)NULL,G__setup_memvarGmpFppChamber,G__setup_memfuncGmpFppChamber);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GmpFppDictLN_GmpStrawChamber),sizeof(GmpStrawChamber),-1,324608,(char*)NULL,G__setup_memvarGmpStrawChamber,G__setup_memfuncGmpStrawChamber);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_THaSubDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GmpFppDictLN_GmpFppPlane),sizeof(GmpFppPlane),-1,324864,"FppPlane class",G__setup_memvarGmpFppPlane,G__setup_memfuncGmpFppPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GmpFppDictLN_GmpFppHit),sizeof(GmpFppHit),-1,294656,(char*)NULL,G__setup_memvarGmpFppHit,G__setup_memfuncGmpFppHit);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_GmpFppPlanecLcLETDCPairStatus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GmpFppDictLN_GmpFppCluster),sizeof(GmpFppCluster),-1,292096,(char*)NULL,G__setup_memvarGmpFppCluster,G__setup_memfuncGmpFppCluster);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_vectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GmpFppDictLN_reverse_iteratorlEvectorlEGmpFppHitmUcOallocatorlEGmpFppHitmUgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupGmpFppDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGmpFppDict()");
  G__set_cpp_environmentGmpFppDict();
  G__cpp_setup_tagtableGmpFppDict();

  G__cpp_setup_inheritanceGmpFppDict();

  G__cpp_setup_typetableGmpFppDict();

  G__cpp_setup_memvarGmpFppDict();

  G__cpp_setup_memfuncGmpFppDict();
  G__cpp_setup_globalGmpFppDict();
  G__cpp_setup_funcGmpFppDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGmpFppDict();
  return;
}
class G__cpp_setup_initGmpFppDict {
  public:
    G__cpp_setup_initGmpFppDict() { G__add_setup_func("GmpFppDict",(G__incsetup)(&G__cpp_setupGmpFppDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGmpFppDict() { G__remove_setup_func("GmpFppDict"); }
};
G__cpp_setup_initGmpFppDict G__cpp_setup_initializerGmpFppDict;

