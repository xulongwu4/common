//
// File generated by /work/halla/gmp12/longwu/software/root/install/5.34.36/bin/rootcint at Thu Apr 20 23:21:10 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME Gmp_XscinDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "Gmp_XscinDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Gmp_Xscin Gmp_Xscin;
      #else
      class Gmp_Xscin  :  public ::THaNonTrackingDetector {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::Gmp_Xscin::DataDest DataDest;
         #else
         class DataDest  {
            public:
            //friend XX;
            int* nthit; //
            int* nahit; //
            double* tdc; //
            double* tdc_c; //
            double* adc; //
            double* adc_p; //
            double* adc_c; //
            double* offset; //
            double* ped; //
            double* gain; //
            double* peak_loc; //
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~Gmp_Xscin() throw() {};
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void Gmp_Xscin_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Gmp_Xscin(void *p = 0);
   static void *newArray_Gmp_Xscin(Long_t size, void *p);
   static void delete_Gmp_Xscin(void *p);
   static void deleteArray_Gmp_Xscin(void *p);
   static void destruct_Gmp_Xscin(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Gmp_Xscin*)
   {
      ::Gmp_Xscin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Gmp_Xscin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Gmp_Xscin", ::Gmp_Xscin::Class_Version(), "./Gmp_Xscin.h", 15,
                  typeid(::Gmp_Xscin), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Gmp_Xscin::Dictionary, isa_proxy, 4,
                  sizeof(::Gmp_Xscin) );
      instance.SetNew(&new_Gmp_Xscin);
      instance.SetNewArray(&newArray_Gmp_Xscin);
      instance.SetDelete(&delete_Gmp_Xscin);
      instance.SetDeleteArray(&deleteArray_Gmp_Xscin);
      instance.SetDestructor(&destruct_Gmp_Xscin);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Gmp_Xscin*)
   {
      return GenerateInitInstanceLocal((::Gmp_Xscin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Gmp_Xscin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Gmp_XscincLcLDataDest_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Gmp_XscincLcLDataDest_Dictionary();
   static void *new_Gmp_XscincLcLDataDest(void *p = 0);
   static void *newArray_Gmp_XscincLcLDataDest(Long_t size, void *p);
   static void delete_Gmp_XscincLcLDataDest(void *p);
   static void deleteArray_Gmp_XscincLcLDataDest(void *p);
   static void destruct_Gmp_XscincLcLDataDest(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Gmp_Xscin::DataDest*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Gmp_Xscin::DataDest) == sizeof( ::ROOTShadow::Shadow::Gmp_Xscin::DataDest));
      ::Gmp_Xscin::DataDest *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Gmp_Xscin::DataDest),0);
      static ::ROOT::TGenericClassInfo 
         instance("Gmp_Xscin::DataDest", "./Gmp_Xscin.h", 107,
                  typeid(::Gmp_Xscin::DataDest), ::ROOT::DefineBehavior(ptr, ptr),
                  &Gmp_XscincLcLDataDest_ShowMembers, &Gmp_XscincLcLDataDest_Dictionary, isa_proxy, 4,
                  sizeof(::Gmp_Xscin::DataDest) );
      instance.SetNew(&new_Gmp_XscincLcLDataDest);
      instance.SetNewArray(&newArray_Gmp_XscincLcLDataDest);
      instance.SetDelete(&delete_Gmp_XscincLcLDataDest);
      instance.SetDeleteArray(&deleteArray_Gmp_XscincLcLDataDest);
      instance.SetDestructor(&destruct_Gmp_XscincLcLDataDest);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Gmp_Xscin::DataDest*)
   {
      return GenerateInitInstanceLocal((::Gmp_Xscin::DataDest*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Gmp_Xscin::DataDest*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Gmp_XscincLcLDataDest_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::Gmp_Xscin::DataDest*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr Gmp_Xscin::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Gmp_Xscin::Class_Name()
{
   return "Gmp_Xscin";
}

//______________________________________________________________________________
const char *Gmp_Xscin::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Gmp_Xscin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Gmp_Xscin::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Gmp_Xscin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Gmp_Xscin::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Gmp_Xscin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Gmp_Xscin::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Gmp_Xscin*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void Gmp_Xscin::Streamer(TBuffer &R__b)
{
   // Stream an object of class Gmp_Xscin.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Gmp_Xscin::Class(),this);
   } else {
      R__b.WriteClassBuffer(Gmp_Xscin::Class(),this);
   }
}

//______________________________________________________________________________
void Gmp_Xscin::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Gmp_Xscin.
      TClass *R__cl = ::Gmp_Xscin::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLOff", &fLOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fROff", &fROff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLPed", &fLPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRPed", &fRPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLGain", &fLGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRGain", &fRGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLPeak", &fLPeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRPeak", &fRPeak);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTdc2T", &fTdc2T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCn", &fCn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTWalkPar", &fNTWalkPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTWalkPar", &fTWalkPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAdcMIP", &fAdcMIP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrigOff", &fTrigOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAttenuation", &fAttenuation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolution", &fResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLTNhit", &fLTNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLT", &fLT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLT_c", &fLT_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRTNhit", &fRTNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRT", &fRT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRT_c", &fRT_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLANhit", &fLANhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLA", &fLA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLA_p", &fLA_p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLA_c", &fLA_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRANhit", &fRANhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRA", &fRA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRA_p", &fRA_p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRA_c", &fRA_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNhit", &fNhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitPad", &fHitPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fdTime", &fdTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAmpl", &fAmpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fXt", &fXt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fXa", &fXa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackProj", &fTrackProj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tan_angle", &tan_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sin_angle", &sin_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cos_angle", &cos_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlip", &fFlip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataDest[2]", fDataDest);
      THaNonTrackingDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Gmp_Xscin(void *p) {
      return  p ? new(p) ::Gmp_Xscin : new ::Gmp_Xscin;
   }
   static void *newArray_Gmp_Xscin(Long_t nElements, void *p) {
      return p ? new(p) ::Gmp_Xscin[nElements] : new ::Gmp_Xscin[nElements];
   }
   // Wrapper around operator delete
   static void delete_Gmp_Xscin(void *p) {
      delete ((::Gmp_Xscin*)p);
   }
   static void deleteArray_Gmp_Xscin(void *p) {
      delete [] ((::Gmp_Xscin*)p);
   }
   static void destruct_Gmp_Xscin(void *p) {
      typedef ::Gmp_Xscin current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Gmp_Xscin

//______________________________________________________________________________
namespace ROOTDict {
   void Gmp_XscincLcLDataDest_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Gmp_Xscin::DataDest.
      typedef ::ROOTShadow::Shadow::Gmp_Xscin::DataDest ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::Gmp_Xscin::DataDest*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nthit", &sobj->nthit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nahit", &sobj->nahit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tdc", &sobj->tdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tdc_c", &sobj->tdc_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*adc", &sobj->adc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*adc_p", &sobj->adc_p);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*adc_c", &sobj->adc_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*offset", &sobj->offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ped", &sobj->ped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gain", &sobj->gain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*peak_loc", &sobj->peak_loc);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Gmp_XscincLcLDataDest(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Gmp_Xscin::DataDest : new ::Gmp_Xscin::DataDest;
   }
   static void *newArray_Gmp_XscincLcLDataDest(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Gmp_Xscin::DataDest[nElements] : new ::Gmp_Xscin::DataDest[nElements];
   }
   // Wrapper around operator delete
   static void delete_Gmp_XscincLcLDataDest(void *p) {
      delete ((::Gmp_Xscin::DataDest*)p);
   }
   static void deleteArray_Gmp_XscincLcLDataDest(void *p) {
      delete [] ((::Gmp_Xscin::DataDest*)p);
   }
   static void destruct_Gmp_XscincLcLDataDest(void *p) {
      typedef ::Gmp_Xscin::DataDest current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Gmp_Xscin::DataDest

/********************************************************
* Gmp_XscinDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGmp_XscinDict();

extern "C" void G__set_cpp_environmentGmp_XscinDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Gmp_Xscin.h");
  G__cpp_reset_tagtableGmp_XscinDict();
}
#include <new>
extern "C" int G__cpp_dllrevGmp_XscinDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Gmp_Xscin */
static int G__Gmp_XscinDict_267_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Gmp_Xscin* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Gmp_Xscin(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (THaApparatus*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) Gmp_Xscin(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (THaApparatus*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Gmp_Xscin(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Gmp_Xscin(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Gmp_Xscin((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Gmp_Xscin((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Gmp_Xscin((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Gmp_Xscin((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Gmp_Xscin*) G__getstructoffset())->ApplyCorrections());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Gmp_Xscin*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const Gmp_Xscin*) G__getstructoffset())->GetTimes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const Gmp_Xscin*) G__getstructoffset())->GetTuncer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const Gmp_Xscin*) G__getstructoffset())->GetAmplitudes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const Gmp_Xscin*) G__getstructoffset())->GetXtime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const Gmp_Xscin*) G__getstructoffset())->GetXampl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Gmp_Xscin*) G__getstructoffset())->GetNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Gmp_Xscin*) G__getstructoffset())->GetTrackHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Gmp_Xscin* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Gmp_Xscin[n];
     } else {
       p = new((void*) gvp) Gmp_Xscin[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Gmp_Xscin;
     } else {
       p = new((void*) gvp) Gmp_Xscin;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Gmp_Xscin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Gmp_Xscin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Gmp_Xscin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Gmp_Xscin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Gmp_Xscin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Gmp_Xscin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Gmp_Xscin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Gmp_Xscin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Gmp_XscinDict_267_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Gmp_Xscin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Gmp_Xscin G__TGmp_Xscin;
static int G__Gmp_XscinDict_267_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Gmp_Xscin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Gmp_Xscin*) (soff+(sizeof(Gmp_Xscin)*i)))->~G__TGmp_Xscin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Gmp_Xscin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Gmp_Xscin*) (soff))->~G__TGmp_Xscin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Gmp_Xscin::DataDest */
// automatic default constructor
static int G__Gmp_XscinDict_268_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Gmp_Xscin::DataDest *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Gmp_Xscin::DataDest[n];
     } else {
       p = new((void*) gvp) Gmp_Xscin::DataDest[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Gmp_Xscin::DataDest;
     } else {
       p = new((void*) gvp) Gmp_Xscin::DataDest;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Gmp_XscinDict_268_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Gmp_Xscin::DataDest* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Gmp_Xscin::DataDest(*(Gmp_Xscin::DataDest*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Gmp_Xscin::DataDest G__TGmp_XscincLcLDataDest;
static int G__Gmp_XscinDict_268_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Gmp_Xscin::DataDest*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Gmp_Xscin::DataDest*) (soff+(sizeof(Gmp_Xscin::DataDest)*i)))->~G__TGmp_XscincLcLDataDest();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Gmp_Xscin::DataDest*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Gmp_Xscin::DataDest*) (soff))->~G__TGmp_XscincLcLDataDest();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Gmp_XscinDict_268_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Gmp_Xscin::DataDest* dest = (Gmp_Xscin::DataDest*) G__getstructoffset();
   *dest = *(Gmp_Xscin::DataDest*) libp->para[0].ref;
   const Gmp_Xscin::DataDest& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Gmp_Xscin */

/* Gmp_Xscin::DataDest */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGmp_XscinDict {
 public:
  G__Sizep2memfuncGmp_XscinDict(): p(&G__Sizep2memfuncGmp_XscinDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGmp_XscinDict::*p)();
};

size_t G__get_sizep2memfuncGmp_XscinDict()
{
  G__Sizep2memfuncGmp_XscinDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGmp_XscinDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin))) {
     Gmp_Xscin *G__Lderived;
     G__Lderived=(Gmp_Xscin*)0x1000;
     {
       THaNonTrackingDetector *G__Lpbase=(THaNonTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin),G__get_linked_tagnum(&G__Gmp_XscinDictLN_THaNonTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin),G__get_linked_tagnum(&G__Gmp_XscinDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin),G__get_linked_tagnum(&G__Gmp_XscinDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin),G__get_linked_tagnum(&G__Gmp_XscinDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin),G__get_linked_tagnum(&G__Gmp_XscinDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin),G__get_linked_tagnum(&G__Gmp_XscinDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin),G__get_linked_tagnum(&G__Gmp_XscinDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGmp_XscinDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__Gmp_XscinDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Gmp_Xscin */
static void G__setup_memvarGmp_Xscin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin));
   { Gmp_Xscin *p; p=(Gmp_Xscin*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLOff=",0,"[fNelem] TDC offsets for left paddles");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fROff=",0,"[fNelem] TDC offsets for right paddles");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLPed=",0,"[fNelem] ADC pedestals for left paddles");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRPed=",0,"[fNelem] ADC pedestals for right paddles");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLGain=",0,"[fNelem] ADC gains for left paddles");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRGain=",0,"[fNelem] ADC gains for right paddles");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLPeak=",0,"[fNelem] TDC peaks for left paddles");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRPeak=",0,"[fNelem] TDC peaks for right paddles");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTdc2T=",0,"linear conversion between TDC and time (s/ch)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCn=",0,"speed of light in material  (meters/second)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTWalkPar=",0,"number of timewalk correction parameters");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTWalkPar=",0,"[fNTWalkPar] time walk correction parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAdcMIP=",0,"nominal ADC above pedestal for MIP");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrigOff=",0,"[fNelem] Induced offset of trigger time from");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAttenuation=",0,"in m^-1: attenuation length of material");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fResolution=",0,"average time resolution per PMT (s)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLTNhit=",0,"Number of Left paddles TDC times");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLT=",0,"[fNelem] Array of Left paddles TDC times (channels)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLT_c=",0,"[fNelem] Array of Left PMT corrected TDC times (s)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRTNhit=",0,"Number of Right paddles TDC times");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRT=",0,"[fNelem] Array of Right paddles TDC times (channels)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRT_c=",0,"[fNelem] Array of Right PMT corrected TDC times (s)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLANhit=",0,"Number of Left paddles ADC amplitudes");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLA=",0,"[fNelem] Array of Left paddles ADC amplitudes");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLA_p=",0,"[fNelem] Array of Left paddles ADC minus ped values");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLA_c=",0,"[fNelem] Array of Left paddles corrected ADC ampl-s");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRANhit=",0,"Number of Right paddles ADC amplitudes");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRA=",0,"[fNelem] Array of Right paddles ADC amplitudes");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRA_p=",0,"[fNelem] Array of Right paddles ADC minus ped values");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRA_c=",0,"[fNelem] Array of Right paddles corrected ADC ampl-s");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNhit=",0,"Number of paddles with complete TDC hits (l&r)");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fHitPad=",0,"[fNhit] list of paddles with complete TDC hits");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTime=",0,"[fNelem] corrected time for the paddle (s)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fdTime=",0,"[fNelem] uncertainty in time (s)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmpl=",0,"[fNelem] overall amplitude for the paddle");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXt=",0,"[fNelem] x-position of hit in paddle from TDC (m)");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXa=",0,"[fNelem] x-position of hit in paddle from ADC (m)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TClonesArray),-1,-1,2,"fTrackProj=",0,"projection of track onto scintillator plane");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"tan_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"sin_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"cos_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFlip=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,99,0,1,-1,-1,-2,2,"NDEST=2LL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest),-1,-1,2,"fDataDest[2]=",0,"Lookup table for decoder");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLESide),-1,-2,2,"kLeft=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLESide),-1,-2,2,"kRight=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__Gmp_XscinDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Gmp_Xscin::DataDest */
static void G__setup_memvarGmp_XscincLcLDataDest(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest));
   { Gmp_Xscin::DataDest *p; p=(Gmp_Xscin::DataDest*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nthit)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"nthit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nahit)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"nahit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdc)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdc_c)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"tdc_c=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->adc)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"adc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->adc_p)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"adc_p=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->adc_c)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"adc_c=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->offset)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ped)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"ped=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gain)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"gain=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->peak_loc)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"peak_loc=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGmp_XscinDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGmp_Xscin(void) {
   /* Gmp_Xscin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin));
   G__memfunc_setup("Gmp_Xscin",904,G__Gmp_XscinDict_267_0_1, 105, G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"g - 'Bool_t' 0 'kFALSE' flip U 'THaApparatus' - 0 'NULL' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__Gmp_XscinDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - run_time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseProcess",1340,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineProcess",1121,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ApplyCorrections",1681,G__Gmp_XscinDict_267_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNHits",774,G__Gmp_XscinDict_267_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimes",802,G__Gmp_XscinDict_267_0_8, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTuncer",913,G__Gmp_XscinDict_267_0_9, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitudes",1336,G__Gmp_XscinDict_267_0_10, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXtime",807,G__Gmp_XscinDict_267_0_11, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXampl",802,G__Gmp_XscinDict_267_0_12, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTracks",982,G__Gmp_XscinDict_267_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackHits",1197,G__Gmp_XscinDict_267_0_14, 85, G__get_linked_tagnum(&G__Gmp_XscinDictLN_TClonesArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Gmp_Xscin",904,G__Gmp_XscinDict_267_0_15, 105, G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_Xscin), -1, 0, 0, 1, 1, 0, "", "for ROOT I/O", (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TimeWalkCorrection",1846,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 11 - paddle i 'Gmp_Xscin::ESide' - 10 - side", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__Gmp_XscinDict_267_0_21, 85, G__get_linked_tagnum(&G__Gmp_XscinDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Gmp_Xscin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Gmp_XscinDict_267_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Gmp_Xscin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Gmp_XscinDict_267_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Gmp_Xscin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Gmp_XscinDict_267_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Gmp_Xscin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__Gmp_XscinDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Gmp_XscinDict_267_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Gmp_XscinDict_267_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Gmp_Xscin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Gmp_XscinDict_267_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Gmp_Xscin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Gmp_XscinDict_267_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Gmp_Xscin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Gmp_XscinDict_267_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Gmp_Xscin::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Gmp_Xscin", 1030, G__Gmp_XscinDict_267_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGmp_XscincLcLDataDest(void) {
   /* Gmp_Xscin::DataDest */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest));
   // automatic default constructor
   G__memfunc_setup("DataDest", 778, G__Gmp_XscinDict_268_0_1, (int) ('i'), G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DataDest", 778, G__Gmp_XscinDict_268_0_2, (int) ('i'), G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest), -1, 0, 1, 1, 1, 0, "u 'Gmp_Xscin::DataDest' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DataDest", 904, G__Gmp_XscinDict_268_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Gmp_XscinDict_268_0_4, (int) ('u'), G__get_linked_tagnum(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest), -1, 1, 1, 1, 1, 0, "u 'Gmp_Xscin::DataDest' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGmp_XscinDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGmp_XscinDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGmp_XscinDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__Gmp_XscinDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaEvData = { "THaEvData" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaAnalysisObject = { "THaAnalysisObject" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaAnalysisObjectcLcLEStatus = { "THaAnalysisObject::EStatus" , 101 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaAnalysisObjectcLcLEMode = { "THaAnalysisObject::EMode" , 101 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaDetectorBase = { "THaDetectorBase" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaDetector = { "THaDetector" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaApparatus = { "THaApparatus" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaSpectrometerDetector = { "THaSpectrometerDetector" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_THaNonTrackingDetector = { "THaNonTrackingDetector" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_Gmp_Xscin = { "Gmp_Xscin" , 99 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest = { "Gmp_Xscin::DataDest" , 115 , -1 };
G__linked_taginfo G__Gmp_XscinDictLN_Gmp_XscincLcLESide = { "Gmp_Xscin::ESide" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGmp_XscinDict() {
  G__Gmp_XscinDictLN_TClass.tagnum = -1 ;
  G__Gmp_XscinDictLN_TBuffer.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMemberInspector.tagnum = -1 ;
  G__Gmp_XscinDictLN_TObject.tagnum = -1 ;
  G__Gmp_XscinDictLN_TNamed.tagnum = -1 ;
  G__Gmp_XscinDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TClonesArray.tagnum = -1 ;
  G__Gmp_XscinDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TDatime.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaEvData.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaAnalysisObject.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaAnalysisObjectcLcLEStatus.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaAnalysisObjectcLcLEMode.tagnum = -1 ;
  G__Gmp_XscinDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaDetectorBase.tagnum = -1 ;
  G__Gmp_XscinDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaDetector.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaApparatus.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaSpectrometerDetector.tagnum = -1 ;
  G__Gmp_XscinDictLN_THaNonTrackingDetector.tagnum = -1 ;
  G__Gmp_XscinDictLN_Gmp_Xscin.tagnum = -1 ;
  G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest.tagnum = -1 ;
  G__Gmp_XscinDictLN_Gmp_XscincLcLESide.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGmp_XscinDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TDatime);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaEvData);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaAnalysisObject);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaAnalysisObjectcLcLEStatus);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaAnalysisObjectcLcLEMode);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaDetectorBase);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaDetector);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaApparatus);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaSpectrometerDetector);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_THaNonTrackingDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_Gmp_Xscin),sizeof(Gmp_Xscin),-1,324864,"Generic scintillator class",G__setup_memvarGmp_Xscin,G__setup_memfuncGmp_Xscin);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_Gmp_XscincLcLDataDest),sizeof(Gmp_Xscin::DataDest),-1,262144,(char*)NULL,G__setup_memvarGmp_XscincLcLDataDest,G__setup_memfuncGmp_XscincLcLDataDest);
   G__get_linked_tagnum_fwd(&G__Gmp_XscinDictLN_Gmp_XscincLcLESide);
}
extern "C" void G__cpp_setupGmp_XscinDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGmp_XscinDict()");
  G__set_cpp_environmentGmp_XscinDict();
  G__cpp_setup_tagtableGmp_XscinDict();

  G__cpp_setup_inheritanceGmp_XscinDict();

  G__cpp_setup_typetableGmp_XscinDict();

  G__cpp_setup_memvarGmp_XscinDict();

  G__cpp_setup_memfuncGmp_XscinDict();
  G__cpp_setup_globalGmp_XscinDict();
  G__cpp_setup_funcGmp_XscinDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGmp_XscinDict();
  return;
}
class G__cpp_setup_initGmp_XscinDict {
  public:
    G__cpp_setup_initGmp_XscinDict() { G__add_setup_func("Gmp_XscinDict",(G__incsetup)(&G__cpp_setupGmp_XscinDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGmp_XscinDict() { G__remove_setup_func("Gmp_XscinDict"); }
};
G__cpp_setup_initGmp_XscinDict G__cpp_setup_initializerGmp_XscinDict;

